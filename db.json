{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":0},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":1,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":1,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":1,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":1,"renderable":1}],"Cache":[{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1531928017642},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1531928017642},{"_id":"themes/apollo/_config.yml","hash":"82871a6a5cb82c958776480a95a8020150f2be87","modified":1531928017642},{"_id":"themes/apollo/README.md","hash":"201c76d030a98578ed5a6ad5c766a7bde91c32d3","modified":1531928017642},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1531928017644},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1531928017651},{"_id":"source/_posts/MySQL常见面试考点概括.md","hash":"340868dc65f94cfe79dca25c501ab3594a05d6e8","modified":1531928541600},{"_id":"source/_posts/Redis知识点归纳.md","hash":"ac37ab4802052f65cdaf783b103455ba561a45fc","modified":1531928521930},{"_id":"source/_posts/SQL语句的执行顺序.md","hash":"600b82c26012a561095f0df3d27232fb18e2892f","modified":1532101461447},{"_id":"source/_posts/Ubuntu18-04下安装搜狗输入法的临时解决方法.md","hash":"a9fc666922c8ec0458344bf949374cddffd5f7ea","modified":1531928017634},{"_id":"source/_posts/git仓库删除所有提交历史记录，成为一个干净的新仓库.md","hash":"eabf788b3a0c8fd4476181b897aa5e160be36a7c","modified":1531928017636},{"_id":"source/_posts/jQuery选择器总结.md","hash":"f308001b6f8010bddad28707acae0037e0139d21","modified":1531928017638},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1531928017637},{"_id":"source/_posts/javascript中call、apply、bind区别.md","hash":"aa208ba864fd1d01e1f8bc6e99a77364f6a8c38b","modified":1531930002430},{"_id":"source/_posts/nginx的配置、虚拟主机、负载均衡和反向代理.md","hash":"e1824fcf9d86dcfe898cff5907fe2e83d6b15472","modified":1531928017639},{"_id":"source/_posts/mysql排序规则COLLATE修改.md","hash":"1901facf15bb1d2e3ca212796f374955960ea4de","modified":1531928362681},{"_id":"source/_posts/为Git设置代理规则.md","hash":"6eee99e15cdf93aed91cf115d13ed8b6c35f3d7c","modified":1531928647966},{"_id":"source/_posts/常用开发资源国内镜像.md","hash":"4c34fec03933d42c05611645c85ff80d5de3b8d7","modified":1531928017640},{"_id":"source/_posts/用golang实现一个RPC.md","hash":"658a98b135f150e983c147a5765bb0924a1dc0a4","modified":1531928017641},{"_id":"source/_posts/移动端常用meta标签收集.md","hash":"cc8668139a0578fa041a01b1ecd1f8d61f6303b3","modified":1531928853235},{"_id":"source/uploads/avatar.png","hash":"4acdd4556d797f1cc539300ab9909131b794da6c","modified":1531928017641},{"_id":"themes/apollo/doc/doc-en.md","hash":"409e931a444c02a57b64a0a44dde6e66c1881ca0","modified":1531928017643},{"_id":"themes/apollo/doc/doc-zh.md","hash":"2a6a81840cdaf497969268a12d8f62c98cc38103","modified":1531928017643},{"_id":"themes/apollo/languages/en.yml","hash":"ca168b190932229884db1de755ec2f793c758a16","modified":1531928017644},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"22a2d16fe8c0dddb016b5325b9b9c182a1b49ae1","modified":1531928017645},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1531928017645},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1531928017646},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1531928017651},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1531928017653},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1531928017647},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1531928017648},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1531928017648},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"529c2ec06cfbc3d5b6d66dd320db50dfab5577a6","modified":1531928017649},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1531928017650},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1531928017650},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1531928017646},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"f23c6c40e14cdf16783b3c2baf736c9dce18408c","modified":1531928017647},{"_id":"themes/apollo/source/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1531928017652},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1531928017655},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1531928017654},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1531928017661},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1531928017655},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1531928017656},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1531928017657},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1531928017657},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1531928017658},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1531928017658},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1531928017659},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1531928017660},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1531928017660},{"_id":"public/baidusitemap.xml","hash":"8f9456fbb82c878de9ff8cca94d0c4c85c66d532","modified":1532101469310},{"_id":"public/atom.xml","hash":"e09dc17a53008086418fe23235561d2fad4ca0f2","modified":1532101469313},{"_id":"public/sitemap.xml","hash":"914db81bfe4c2cf04da27443e111bf3d1d5fe4f8","modified":1532101469313},{"_id":"public/2018/07/20/SQL语句的执行顺序/index.html","hash":"5ad1cd34ac4bab20066bc3affccf523137dc9497","modified":1532101469318},{"_id":"public/2018/07/18/移动端常用meta标签收集/index.html","hash":"d744f620c13d5229f28d834a4901ebcafb00a217","modified":1532101469318},{"_id":"public/2018/07/18/Redis知识点归纳/index.html","hash":"1a16d5c8f8aa46f76eb607ffcdf5a5930854764e","modified":1532101469318},{"_id":"public/2018/07/18/mysql排序规则COLLATE修改/index.html","hash":"1465288694f70a7522a4c567f67268658a9bb18a","modified":1532101469318},{"_id":"public/2018/07/18/为Git设置代理规则/index.html","hash":"6c47251edb0728902a19fd1444d35ece35de9d09","modified":1532101469318},{"_id":"public/2018/07/18/hello-world/index.html","hash":"5503e8e063371d54b9013402389b55cee66c01ba","modified":1532101469319},{"_id":"public/2018/07/12/MySQL常见面试考点概括/index.html","hash":"9bd5aa49b115c9789a9af65a4ed8ef896e640b2d","modified":1532101469319},{"_id":"public/2018/07/11/javascript中call、apply、bind区别/index.html","hash":"ae58ff78fe2a80dd52b58cf0ea5fa8b8bfdfb795","modified":1532101469319},{"_id":"public/2018/07/11/用golang实现一个RPC/index.html","hash":"01a9b672062dd2a63f82eecde8ee11f6a1210f16","modified":1532101469319},{"_id":"public/2018/07/11/Ubuntu18-04下安装搜狗输入法的临时解决方法/index.html","hash":"389db529d7ebb94da3e719b391afebae20be830e","modified":1532101469319},{"_id":"public/2018/07/11/git仓库删除所有提交历史记录，成为一个干净的新仓库/index.html","hash":"e3d68fcdfe552829f7c05dbf1ab7c36da69c5acd","modified":1532101469319},{"_id":"public/2018/07/11/常用开发资源国内镜像/index.html","hash":"f7a47bd469e92702180a6929c9b0d79f9f9c041d","modified":1532101469320},{"_id":"public/archives/index.html","hash":"e26760e67f5a60d2d858f30d91ba8d09335c6111","modified":1532101469320},{"_id":"public/index.html","hash":"519ce82acec8e14cc5b8a67084d915a6b947010b","modified":1532101469320},{"_id":"public/page/2/index.html","hash":"62fcd14189dac5cdaf5ef446b15f588977cc3b55","modified":1532101469320},{"_id":"public/tags/redis/index.html","hash":"9f64bb38970f46f1a9c725a055498504a5f6e96b","modified":1532101469320},{"_id":"public/tags/mysql/index.html","hash":"1aa644f1adad40b88994d07d305559ffd0fa0f92","modified":1532101469320},{"_id":"public/tags/git/index.html","hash":"7dab8e8b4ab89913ab9034b78d9d2f05aaa0f635","modified":1532101469320},{"_id":"public/tags/jQuery-css/index.html","hash":"85ca3fd6307bee145c447e357aab5e4b0c30322f","modified":1532101469321},{"_id":"public/tags/nginx/index.html","hash":"523fae98b3854cfac87be296b323d5d25223c34f","modified":1532101469321},{"_id":"public/tags/js/index.html","hash":"4a430953c66822496a5355069b64c59c99bb9c07","modified":1532101469321},{"_id":"public/tags/git-proxy/index.html","hash":"d6c57a6357e1bb09636038a96deaff525ccf9bd1","modified":1532101469321},{"_id":"public/tags/php-nodejs-npm-python-pip-composer/index.html","hash":"7319d627d452641c488891e1e47611dd98b5535c","modified":1532101469321},{"_id":"public/tags/go-golang-rpc/index.html","hash":"2e2b039a73d97b8712c7187c0828fc95e919c3a0","modified":1532101469321},{"_id":"public/tags/html-h5-meta/index.html","hash":"7546bb1dd820af6cf4bfeac6bb995e89bd1812f1","modified":1532101469321},{"_id":"public/2018/07/11/nginx的配置、虚拟主机、负载均衡和反向代理/index.html","hash":"b0547e2cd039466fa1b02dca9eb3cefea42359cd","modified":1532101469321},{"_id":"public/2018/07/11/jQuery选择器总结/index.html","hash":"08952c18316db3e29f01ff6822f3feb6ca926834","modified":1532101469322},{"_id":"public/uploads/avatar.png","hash":"4acdd4556d797f1cc539300ab9909131b794da6c","modified":1532101469329},{"_id":"public/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1532101469329},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1532101469329},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1532101469329},{"_id":"public/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1532101469329},{"_id":"public/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1532101469352}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"MySQL常见知识点概括","date":"2018-07-12T07:21:58.000Z","_content":"无奈，公司黄了。又要找工作了，简单归纳一下，方面以后自己查阅。\n### 存储引擎\n1. InnoDB\n    * 默认事务型\n    * 数据储存在共享表空间，可以通过配置分开\n    * 主键查询性能高于其他引擎\n    * 内部做了很多优化，词谱读取数据时自动在内存中构建hash索引\n    * 插入数据自动插入缓冲区\n    * 支持真正的热备份\n    * 支持崩溃后安全回复\n    * 支持行锁\n    * 支持外键\n2. MyISAM\n    * 支持全文索引（很少使用，只支持英文）\n    * 支持数据压缩\n    * 支持空间函数\n    * 表锁\n    * 表数据存储在 MYD、MYI两个文件中 方便数据迁移\n    * 设计简单，某些场景下性能很好\n3. 其他存储引擎\n    * Archive\n    * Blackhole\n    * CSV\n    * Memory\n\n### 事务处理\n1. MySQL提供事务处理的引擎 innoDB\n2. 事务由存储引擎实现，所以在同一个事务中使用多种存储引擎不可行\n3. 在非事务表中执行事务操作，不会提醒也不会报错\n\n### 存储过程\n1. 一条或多条sql语句的集合\n2. 存储过程就是业务逻辑和流程的集合\n3. 不推荐使用，会造成系统维护灾难\n\n### 触发器\n1. 可以保证数据的完整性\n2. 不推荐使用，会造成系统维护灾难\n\n### 索引\n1. 小表全表扫描效率更高，占用空间，降低写操作性能。\n2. 特大型表，建立和使用索引的代价会随着数据量增长而增加，可以使用分区技术解决。\n3. 索引都是在存储引擎层实现的。\n4. 索引类型\n    * 普通索引: 基本索引，无约束限制\n    * 唯一索引: 具有唯一性约束，允许为空\n    * 主键索引: 特殊的唯一索引，不允许为空\n5. 唯一索引和主键索引的区别：\n    * 一直表有且只能有一个主键索引，可以有多个唯一索引\n    * 主键索引一定是唯一索引，但唯一索引不一定是主键索引\n    * 主键可以与外键构成参照完整性约束，防止数据不一致\n6. 外键索引: 只有InnoDB支持，可以保证数据一致性，完整性，和实现级联操作\n7. 全文索引\n    * 只能用于MyISAM\n    * 只支持英文（可使用其他搜索引擎，如Sphinx、elasticsearch等）\n8. 索引使用原则\n    * 最适合索引的列是where 或 on 后面的列\n    * 索引的基数越大，效果越好\n    * 字符串索引，指定前缀长度，可以节省大量的索引占用空间\n    * 避免建立过多的索引，会导致占用磁盘空间，降低写操作性能\n    * 主键应当选择比较短的数据类型，可以有效的提高查询效率\n9. SQL查询优化\n    1. 索引使用\n        * 前缀原则\n        * like查询，%不能再前，可以使用全文索引或其他搜索引擎\n        * column is null 可以使用索引\n        * MySQL会根据数据量自动选择是否使用索引\n        * or 查询条件中注意前后的条件都必须有有索引\n        * 数据类型为字符串时，查询值不加引号，会使索引失效\n        * 使用连接查询代替子查询 （子查询效率很低）\n    2. 记录慢查询日志\n        ```\n        show profile\n        set profiling = 1\n        show profiles\n        show profile for query # 临时表ID\n        explain or desc sql\n        show processlist\n        ```\n    3. 将复杂的sql分拆成多个简单查询 可以更方便做数据缓存\n    4. 如果不需要使用ORDER BY 进行GROUP BY时可是使用 ORDER BY NULL，MySQL不会进行文件排序，可以调高查询效率\n    5. limit 偏移量大的时候，可以添加上次查询结果最大的id作为条件以提高查询效率\n\n### 分区分表分库\n1. 分区\n    * ID 切分\n    * 时间切分\n2. 分表\n    * 水平切分\n    * 垂直切分\n3. 分库\n    * 水平切分\n    * 垂直切分\n\n### 主从复制\n1. 二进制日志\n    * 数据同步\n    * 操作同步\n    * 混合同步\n\n### 安全问题\n1. 使用预处理语句防止sql注入 PDO\n1. 转义特殊字符\n1. 查询错误处理\n1. 定期做数据备份\n1. 合理分配权限，限制普通用户浏览其他数据库\n1. 关闭远程链接权限\n1. 修改root用户密码，不适用弱口令\n1. 删除不需要的用户\n1. 限制访问数据库文件\n","source":"_posts/MySQL常见面试考点概括.md","raw":"---\ntitle: MySQL常见知识点概括\ndate: 2018-07-12 15:21:58\ntags:\n---\n无奈，公司黄了。又要找工作了，简单归纳一下，方面以后自己查阅。\n### 存储引擎\n1. InnoDB\n    * 默认事务型\n    * 数据储存在共享表空间，可以通过配置分开\n    * 主键查询性能高于其他引擎\n    * 内部做了很多优化，词谱读取数据时自动在内存中构建hash索引\n    * 插入数据自动插入缓冲区\n    * 支持真正的热备份\n    * 支持崩溃后安全回复\n    * 支持行锁\n    * 支持外键\n2. MyISAM\n    * 支持全文索引（很少使用，只支持英文）\n    * 支持数据压缩\n    * 支持空间函数\n    * 表锁\n    * 表数据存储在 MYD、MYI两个文件中 方便数据迁移\n    * 设计简单，某些场景下性能很好\n3. 其他存储引擎\n    * Archive\n    * Blackhole\n    * CSV\n    * Memory\n\n### 事务处理\n1. MySQL提供事务处理的引擎 innoDB\n2. 事务由存储引擎实现，所以在同一个事务中使用多种存储引擎不可行\n3. 在非事务表中执行事务操作，不会提醒也不会报错\n\n### 存储过程\n1. 一条或多条sql语句的集合\n2. 存储过程就是业务逻辑和流程的集合\n3. 不推荐使用，会造成系统维护灾难\n\n### 触发器\n1. 可以保证数据的完整性\n2. 不推荐使用，会造成系统维护灾难\n\n### 索引\n1. 小表全表扫描效率更高，占用空间，降低写操作性能。\n2. 特大型表，建立和使用索引的代价会随着数据量增长而增加，可以使用分区技术解决。\n3. 索引都是在存储引擎层实现的。\n4. 索引类型\n    * 普通索引: 基本索引，无约束限制\n    * 唯一索引: 具有唯一性约束，允许为空\n    * 主键索引: 特殊的唯一索引，不允许为空\n5. 唯一索引和主键索引的区别：\n    * 一直表有且只能有一个主键索引，可以有多个唯一索引\n    * 主键索引一定是唯一索引，但唯一索引不一定是主键索引\n    * 主键可以与外键构成参照完整性约束，防止数据不一致\n6. 外键索引: 只有InnoDB支持，可以保证数据一致性，完整性，和实现级联操作\n7. 全文索引\n    * 只能用于MyISAM\n    * 只支持英文（可使用其他搜索引擎，如Sphinx、elasticsearch等）\n8. 索引使用原则\n    * 最适合索引的列是where 或 on 后面的列\n    * 索引的基数越大，效果越好\n    * 字符串索引，指定前缀长度，可以节省大量的索引占用空间\n    * 避免建立过多的索引，会导致占用磁盘空间，降低写操作性能\n    * 主键应当选择比较短的数据类型，可以有效的提高查询效率\n9. SQL查询优化\n    1. 索引使用\n        * 前缀原则\n        * like查询，%不能再前，可以使用全文索引或其他搜索引擎\n        * column is null 可以使用索引\n        * MySQL会根据数据量自动选择是否使用索引\n        * or 查询条件中注意前后的条件都必须有有索引\n        * 数据类型为字符串时，查询值不加引号，会使索引失效\n        * 使用连接查询代替子查询 （子查询效率很低）\n    2. 记录慢查询日志\n        ```\n        show profile\n        set profiling = 1\n        show profiles\n        show profile for query # 临时表ID\n        explain or desc sql\n        show processlist\n        ```\n    3. 将复杂的sql分拆成多个简单查询 可以更方便做数据缓存\n    4. 如果不需要使用ORDER BY 进行GROUP BY时可是使用 ORDER BY NULL，MySQL不会进行文件排序，可以调高查询效率\n    5. limit 偏移量大的时候，可以添加上次查询结果最大的id作为条件以提高查询效率\n\n### 分区分表分库\n1. 分区\n    * ID 切分\n    * 时间切分\n2. 分表\n    * 水平切分\n    * 垂直切分\n3. 分库\n    * 水平切分\n    * 垂直切分\n\n### 主从复制\n1. 二进制日志\n    * 数据同步\n    * 操作同步\n    * 混合同步\n\n### 安全问题\n1. 使用预处理语句防止sql注入 PDO\n1. 转义特殊字符\n1. 查询错误处理\n1. 定期做数据备份\n1. 合理分配权限，限制普通用户浏览其他数据库\n1. 关闭远程链接权限\n1. 修改root用户密码，不适用弱口令\n1. 删除不需要的用户\n1. 限制访问数据库文件\n","slug":"MySQL常见面试考点概括","published":1,"updated":"2018-07-18T15:42:21.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nmkp0000qghhunph1egi","content":"<p>无奈，公司黄了。又要找工作了，简单归纳一下，方面以后自己查阅。</p>\n<h3 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h3><ol>\n<li>InnoDB<ul>\n<li>默认事务型</li>\n<li>数据储存在共享表空间，可以通过配置分开</li>\n<li>主键查询性能高于其他引擎</li>\n<li>内部做了很多优化，词谱读取数据时自动在内存中构建hash索引</li>\n<li>插入数据自动插入缓冲区</li>\n<li>支持真正的热备份</li>\n<li>支持崩溃后安全回复</li>\n<li>支持行锁</li>\n<li>支持外键</li>\n</ul>\n</li>\n<li>MyISAM<ul>\n<li>支持全文索引（很少使用，只支持英文）</li>\n<li>支持数据压缩</li>\n<li>支持空间函数</li>\n<li>表锁</li>\n<li>表数据存储在 MYD、MYI两个文件中 方便数据迁移</li>\n<li>设计简单，某些场景下性能很好</li>\n</ul>\n</li>\n<li>其他存储引擎<ul>\n<li>Archive</li>\n<li>Blackhole</li>\n<li>CSV</li>\n<li>Memory</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"事务处理\"><a href=\"#事务处理\" class=\"headerlink\" title=\"事务处理\"></a>事务处理</h3><ol>\n<li>MySQL提供事务处理的引擎 innoDB</li>\n<li>事务由存储引擎实现，所以在同一个事务中使用多种存储引擎不可行</li>\n<li>在非事务表中执行事务操作，不会提醒也不会报错</li>\n</ol>\n<h3 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h3><ol>\n<li>一条或多条sql语句的集合</li>\n<li>存储过程就是业务逻辑和流程的集合</li>\n<li>不推荐使用，会造成系统维护灾难</li>\n</ol>\n<h3 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h3><ol>\n<li>可以保证数据的完整性</li>\n<li>不推荐使用，会造成系统维护灾难</li>\n</ol>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><ol>\n<li>小表全表扫描效率更高，占用空间，降低写操作性能。</li>\n<li>特大型表，建立和使用索引的代价会随着数据量增长而增加，可以使用分区技术解决。</li>\n<li>索引都是在存储引擎层实现的。</li>\n<li>索引类型<ul>\n<li>普通索引: 基本索引，无约束限制</li>\n<li>唯一索引: 具有唯一性约束，允许为空</li>\n<li>主键索引: 特殊的唯一索引，不允许为空</li>\n</ul>\n</li>\n<li>唯一索引和主键索引的区别：<ul>\n<li>一直表有且只能有一个主键索引，可以有多个唯一索引</li>\n<li>主键索引一定是唯一索引，但唯一索引不一定是主键索引</li>\n<li>主键可以与外键构成参照完整性约束，防止数据不一致</li>\n</ul>\n</li>\n<li>外键索引: 只有InnoDB支持，可以保证数据一致性，完整性，和实现级联操作</li>\n<li>全文索引<ul>\n<li>只能用于MyISAM</li>\n<li>只支持英文（可使用其他搜索引擎，如Sphinx、elasticsearch等）</li>\n</ul>\n</li>\n<li>索引使用原则<ul>\n<li>最适合索引的列是where 或 on 后面的列</li>\n<li>索引的基数越大，效果越好</li>\n<li>字符串索引，指定前缀长度，可以节省大量的索引占用空间</li>\n<li>避免建立过多的索引，会导致占用磁盘空间，降低写操作性能</li>\n<li>主键应当选择比较短的数据类型，可以有效的提高查询效率</li>\n</ul>\n</li>\n<li><p>SQL查询优化</p>\n<ol>\n<li>索引使用<ul>\n<li>前缀原则</li>\n<li>like查询，%不能再前，可以使用全文索引或其他搜索引擎</li>\n<li>column is null 可以使用索引</li>\n<li>MySQL会根据数据量自动选择是否使用索引</li>\n<li>or 查询条件中注意前后的条件都必须有有索引</li>\n<li>数据类型为字符串时，查询值不加引号，会使索引失效</li>\n<li>使用连接查询代替子查询 （子查询效率很低）</li>\n</ul>\n</li>\n<li><p>记录慢查询日志</p>\n <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show profile</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> profiling = 1</span><br><span class=\"line\">show profiles</span><br><span class=\"line\">show<span class=\"built_in\"> profile </span><span class=\"keyword\">for</span> query # 临时表ID</span><br><span class=\"line\">explain <span class=\"keyword\">or</span> desc sql</span><br><span class=\"line\">show processlist</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将复杂的sql分拆成多个简单查询 可以更方便做数据缓存</p>\n</li>\n<li>如果不需要使用ORDER BY 进行GROUP BY时可是使用 ORDER BY NULL，MySQL不会进行文件排序，可以调高查询效率</li>\n<li>limit 偏移量大的时候，可以添加上次查询结果最大的id作为条件以提高查询效率</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"分区分表分库\"><a href=\"#分区分表分库\" class=\"headerlink\" title=\"分区分表分库\"></a>分区分表分库</h3><ol>\n<li>分区<ul>\n<li>ID 切分</li>\n<li>时间切分</li>\n</ul>\n</li>\n<li>分表<ul>\n<li>水平切分</li>\n<li>垂直切分</li>\n</ul>\n</li>\n<li>分库<ul>\n<li>水平切分</li>\n<li>垂直切分</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h3><ol>\n<li>二进制日志<ul>\n<li>数据同步</li>\n<li>操作同步</li>\n<li>混合同步</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安全问题\"><a href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"></a>安全问题</h3><ol>\n<li>使用预处理语句防止sql注入 PDO</li>\n<li>转义特殊字符</li>\n<li>查询错误处理</li>\n<li>定期做数据备份</li>\n<li>合理分配权限，限制普通用户浏览其他数据库</li>\n<li>关闭远程链接权限</li>\n<li>修改root用户密码，不适用弱口令</li>\n<li>删除不需要的用户</li>\n<li>限制访问数据库文件</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>无奈，公司黄了。又要找工作了，简单归纳一下，方面以后自己查阅。</p>\n<h3 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h3><ol>\n<li>InnoDB<ul>\n<li>默认事务型</li>\n<li>数据储存在共享表空间，可以通过配置分开</li>\n<li>主键查询性能高于其他引擎</li>\n<li>内部做了很多优化，词谱读取数据时自动在内存中构建hash索引</li>\n<li>插入数据自动插入缓冲区</li>\n<li>支持真正的热备份</li>\n<li>支持崩溃后安全回复</li>\n<li>支持行锁</li>\n<li>支持外键</li>\n</ul>\n</li>\n<li>MyISAM<ul>\n<li>支持全文索引（很少使用，只支持英文）</li>\n<li>支持数据压缩</li>\n<li>支持空间函数</li>\n<li>表锁</li>\n<li>表数据存储在 MYD、MYI两个文件中 方便数据迁移</li>\n<li>设计简单，某些场景下性能很好</li>\n</ul>\n</li>\n<li>其他存储引擎<ul>\n<li>Archive</li>\n<li>Blackhole</li>\n<li>CSV</li>\n<li>Memory</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"事务处理\"><a href=\"#事务处理\" class=\"headerlink\" title=\"事务处理\"></a>事务处理</h3><ol>\n<li>MySQL提供事务处理的引擎 innoDB</li>\n<li>事务由存储引擎实现，所以在同一个事务中使用多种存储引擎不可行</li>\n<li>在非事务表中执行事务操作，不会提醒也不会报错</li>\n</ol>\n<h3 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h3><ol>\n<li>一条或多条sql语句的集合</li>\n<li>存储过程就是业务逻辑和流程的集合</li>\n<li>不推荐使用，会造成系统维护灾难</li>\n</ol>\n<h3 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h3><ol>\n<li>可以保证数据的完整性</li>\n<li>不推荐使用，会造成系统维护灾难</li>\n</ol>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><ol>\n<li>小表全表扫描效率更高，占用空间，降低写操作性能。</li>\n<li>特大型表，建立和使用索引的代价会随着数据量增长而增加，可以使用分区技术解决。</li>\n<li>索引都是在存储引擎层实现的。</li>\n<li>索引类型<ul>\n<li>普通索引: 基本索引，无约束限制</li>\n<li>唯一索引: 具有唯一性约束，允许为空</li>\n<li>主键索引: 特殊的唯一索引，不允许为空</li>\n</ul>\n</li>\n<li>唯一索引和主键索引的区别：<ul>\n<li>一直表有且只能有一个主键索引，可以有多个唯一索引</li>\n<li>主键索引一定是唯一索引，但唯一索引不一定是主键索引</li>\n<li>主键可以与外键构成参照完整性约束，防止数据不一致</li>\n</ul>\n</li>\n<li>外键索引: 只有InnoDB支持，可以保证数据一致性，完整性，和实现级联操作</li>\n<li>全文索引<ul>\n<li>只能用于MyISAM</li>\n<li>只支持英文（可使用其他搜索引擎，如Sphinx、elasticsearch等）</li>\n</ul>\n</li>\n<li>索引使用原则<ul>\n<li>最适合索引的列是where 或 on 后面的列</li>\n<li>索引的基数越大，效果越好</li>\n<li>字符串索引，指定前缀长度，可以节省大量的索引占用空间</li>\n<li>避免建立过多的索引，会导致占用磁盘空间，降低写操作性能</li>\n<li>主键应当选择比较短的数据类型，可以有效的提高查询效率</li>\n</ul>\n</li>\n<li><p>SQL查询优化</p>\n<ol>\n<li>索引使用<ul>\n<li>前缀原则</li>\n<li>like查询，%不能再前，可以使用全文索引或其他搜索引擎</li>\n<li>column is null 可以使用索引</li>\n<li>MySQL会根据数据量自动选择是否使用索引</li>\n<li>or 查询条件中注意前后的条件都必须有有索引</li>\n<li>数据类型为字符串时，查询值不加引号，会使索引失效</li>\n<li>使用连接查询代替子查询 （子查询效率很低）</li>\n</ul>\n</li>\n<li><p>记录慢查询日志</p>\n <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show profile</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> profiling = 1</span><br><span class=\"line\">show profiles</span><br><span class=\"line\">show<span class=\"built_in\"> profile </span><span class=\"keyword\">for</span> query # 临时表ID</span><br><span class=\"line\">explain <span class=\"keyword\">or</span> desc sql</span><br><span class=\"line\">show processlist</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将复杂的sql分拆成多个简单查询 可以更方便做数据缓存</p>\n</li>\n<li>如果不需要使用ORDER BY 进行GROUP BY时可是使用 ORDER BY NULL，MySQL不会进行文件排序，可以调高查询效率</li>\n<li>limit 偏移量大的时候，可以添加上次查询结果最大的id作为条件以提高查询效率</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"分区分表分库\"><a href=\"#分区分表分库\" class=\"headerlink\" title=\"分区分表分库\"></a>分区分表分库</h3><ol>\n<li>分区<ul>\n<li>ID 切分</li>\n<li>时间切分</li>\n</ul>\n</li>\n<li>分表<ul>\n<li>水平切分</li>\n<li>垂直切分</li>\n</ul>\n</li>\n<li>分库<ul>\n<li>水平切分</li>\n<li>垂直切分</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h3><ol>\n<li>二进制日志<ul>\n<li>数据同步</li>\n<li>操作同步</li>\n<li>混合同步</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安全问题\"><a href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"></a>安全问题</h3><ol>\n<li>使用预处理语句防止sql注入 PDO</li>\n<li>转义特殊字符</li>\n<li>查询错误处理</li>\n<li>定期做数据备份</li>\n<li>合理分配权限，限制普通用户浏览其他数据库</li>\n<li>关闭远程链接权限</li>\n<li>修改root用户密码，不适用弱口令</li>\n<li>删除不需要的用户</li>\n<li>限制访问数据库文件</li>\n</ol>\n"},{"title":"Redis知识点归纳","date":"2018-07-18T15:39:50.000Z","_content":"### 支持数据类型\n1. String\n1. List\n1. Hash\n1. Set\n1. Sort Set\n\n### Redis 与 Memcached 区别于对比\n1. Redis 支持更多的数据类型 Memcached 只支持key-value\n1. Redis 支持数据持久化 ，Memcached 不支持\n1. Redis 速度比Memcached快\n1. Redis 支持单条数据容量达到1G，Memcached只支持1M\n1. Redis与Memcached都限制于物理内存大小，只适合做数据量较小的高性能操作与运算\n1. Memcached可以通过HASH一致性实现分布式\n1. Redis 支持事物，操作都是原子性（对数据操作要么全部执行，要么全部不执行）\n1. 两者都可以设置过期时间，适合做缓存服务\n1. Redis支持主从复制\n\n### Redis是单进程单线程的\nredis利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销\n\n### Redis并发竞争问题\n1. Redis 并没有锁的概念，多个客户端之间并不存在竞争。\n1. 客户端对Redis访问时会发生连接超时、数据转换错误、阻塞、客户端关闭连接等问题，这些问题都是因为客户端连接混乱引起的。\n\n### Redis数据持久化\n1. 快照\n1. AOF\n1. 虚拟内存\n\n### Redis适合的使用场景\n1. 会话缓存\n1. 页面缓存\n1. 队列\n1. 排行榜，计数器\n1. 发布订阅\n","source":"_posts/Redis知识点归纳.md","raw":"---\ntitle: Redis知识点归纳\ndate: 2018-07-18 23:39:50\ntags: redis\n---\n### 支持数据类型\n1. String\n1. List\n1. Hash\n1. Set\n1. Sort Set\n\n### Redis 与 Memcached 区别于对比\n1. Redis 支持更多的数据类型 Memcached 只支持key-value\n1. Redis 支持数据持久化 ，Memcached 不支持\n1. Redis 速度比Memcached快\n1. Redis 支持单条数据容量达到1G，Memcached只支持1M\n1. Redis与Memcached都限制于物理内存大小，只适合做数据量较小的高性能操作与运算\n1. Memcached可以通过HASH一致性实现分布式\n1. Redis 支持事物，操作都是原子性（对数据操作要么全部执行，要么全部不执行）\n1. 两者都可以设置过期时间，适合做缓存服务\n1. Redis支持主从复制\n\n### Redis是单进程单线程的\nredis利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销\n\n### Redis并发竞争问题\n1. Redis 并没有锁的概念，多个客户端之间并不存在竞争。\n1. 客户端对Redis访问时会发生连接超时、数据转换错误、阻塞、客户端关闭连接等问题，这些问题都是因为客户端连接混乱引起的。\n\n### Redis数据持久化\n1. 快照\n1. AOF\n1. 虚拟内存\n\n### Redis适合的使用场景\n1. 会话缓存\n1. 页面缓存\n1. 队列\n1. 排行榜，计数器\n1. 发布订阅\n","slug":"Redis知识点归纳","published":1,"updated":"2018-07-18T15:42:01.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nmku0001qghhso1yljct","content":"<h3 id=\"支持数据类型\"><a href=\"#支持数据类型\" class=\"headerlink\" title=\"支持数据类型\"></a>支持数据类型</h3><ol>\n<li>String</li>\n<li>List</li>\n<li>Hash</li>\n<li>Set</li>\n<li>Sort Set</li>\n</ol>\n<h3 id=\"Redis-与-Memcached-区别于对比\"><a href=\"#Redis-与-Memcached-区别于对比\" class=\"headerlink\" title=\"Redis 与 Memcached 区别于对比\"></a>Redis 与 Memcached 区别于对比</h3><ol>\n<li>Redis 支持更多的数据类型 Memcached 只支持key-value</li>\n<li>Redis 支持数据持久化 ，Memcached 不支持</li>\n<li>Redis 速度比Memcached快</li>\n<li>Redis 支持单条数据容量达到1G，Memcached只支持1M</li>\n<li>Redis与Memcached都限制于物理内存大小，只适合做数据量较小的高性能操作与运算</li>\n<li>Memcached可以通过HASH一致性实现分布式</li>\n<li>Redis 支持事物，操作都是原子性（对数据操作要么全部执行，要么全部不执行）</li>\n<li>两者都可以设置过期时间，适合做缓存服务</li>\n<li>Redis支持主从复制</li>\n</ol>\n<h3 id=\"Redis是单进程单线程的\"><a href=\"#Redis是单进程单线程的\" class=\"headerlink\" title=\"Redis是单进程单线程的\"></a>Redis是单进程单线程的</h3><p>redis利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销</p>\n<h3 id=\"Redis并发竞争问题\"><a href=\"#Redis并发竞争问题\" class=\"headerlink\" title=\"Redis并发竞争问题\"></a>Redis并发竞争问题</h3><ol>\n<li>Redis 并没有锁的概念，多个客户端之间并不存在竞争。</li>\n<li>客户端对Redis访问时会发生连接超时、数据转换错误、阻塞、客户端关闭连接等问题，这些问题都是因为客户端连接混乱引起的。</li>\n</ol>\n<h3 id=\"Redis数据持久化\"><a href=\"#Redis数据持久化\" class=\"headerlink\" title=\"Redis数据持久化\"></a>Redis数据持久化</h3><ol>\n<li>快照</li>\n<li>AOF</li>\n<li>虚拟内存</li>\n</ol>\n<h3 id=\"Redis适合的使用场景\"><a href=\"#Redis适合的使用场景\" class=\"headerlink\" title=\"Redis适合的使用场景\"></a>Redis适合的使用场景</h3><ol>\n<li>会话缓存</li>\n<li>页面缓存</li>\n<li>队列</li>\n<li>排行榜，计数器</li>\n<li>发布订阅</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"支持数据类型\"><a href=\"#支持数据类型\" class=\"headerlink\" title=\"支持数据类型\"></a>支持数据类型</h3><ol>\n<li>String</li>\n<li>List</li>\n<li>Hash</li>\n<li>Set</li>\n<li>Sort Set</li>\n</ol>\n<h3 id=\"Redis-与-Memcached-区别于对比\"><a href=\"#Redis-与-Memcached-区别于对比\" class=\"headerlink\" title=\"Redis 与 Memcached 区别于对比\"></a>Redis 与 Memcached 区别于对比</h3><ol>\n<li>Redis 支持更多的数据类型 Memcached 只支持key-value</li>\n<li>Redis 支持数据持久化 ，Memcached 不支持</li>\n<li>Redis 速度比Memcached快</li>\n<li>Redis 支持单条数据容量达到1G，Memcached只支持1M</li>\n<li>Redis与Memcached都限制于物理内存大小，只适合做数据量较小的高性能操作与运算</li>\n<li>Memcached可以通过HASH一致性实现分布式</li>\n<li>Redis 支持事物，操作都是原子性（对数据操作要么全部执行，要么全部不执行）</li>\n<li>两者都可以设置过期时间，适合做缓存服务</li>\n<li>Redis支持主从复制</li>\n</ol>\n<h3 id=\"Redis是单进程单线程的\"><a href=\"#Redis是单进程单线程的\" class=\"headerlink\" title=\"Redis是单进程单线程的\"></a>Redis是单进程单线程的</h3><p>redis利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销</p>\n<h3 id=\"Redis并发竞争问题\"><a href=\"#Redis并发竞争问题\" class=\"headerlink\" title=\"Redis并发竞争问题\"></a>Redis并发竞争问题</h3><ol>\n<li>Redis 并没有锁的概念，多个客户端之间并不存在竞争。</li>\n<li>客户端对Redis访问时会发生连接超时、数据转换错误、阻塞、客户端关闭连接等问题，这些问题都是因为客户端连接混乱引起的。</li>\n</ol>\n<h3 id=\"Redis数据持久化\"><a href=\"#Redis数据持久化\" class=\"headerlink\" title=\"Redis数据持久化\"></a>Redis数据持久化</h3><ol>\n<li>快照</li>\n<li>AOF</li>\n<li>虚拟内存</li>\n</ol>\n<h3 id=\"Redis适合的使用场景\"><a href=\"#Redis适合的使用场景\" class=\"headerlink\" title=\"Redis适合的使用场景\"></a>Redis适合的使用场景</h3><ol>\n<li>会话缓存</li>\n<li>页面缓存</li>\n<li>队列</li>\n<li>排行榜，计数器</li>\n<li>发布订阅</li>\n</ol>\n"},{"title":"SQL语句的执行顺序","date":"2018-07-20T15:34:08.000Z","_content":"知道怎么执行的才能更好的优化sql的写法。\n### FORM\n 对FROM的左边的表和右边的表计算笛卡尔积。产生虚表VT1\n### ON\n 对虚表VT1进行ON筛选，只有那些符合<join-condition>的行才会被记录在虚表VT2中。\n### JOIN\n 如果指定了OUTER JOIN（比如left join、 right join），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中，产生虚拟表VT3, rug from子句中包含两个以上的表的话，那么就会对上一个join连接产生的结果VT3和下一个表重复执行步骤1~3这三个步骤，一直到处理完所有的表为止。\n### WHERE\n 对虚拟表VT3进行WHERE条件过滤。只有符合<where-condition>的记录才会被插入到虚拟表VT4中。\n## GROUP BY\n 根据group by子句中的列，对VT4中的记录进行分组操作，产生VT5.\n### CUBE | ROLLUP\n 对表VT5进行cube或者rollup操作，产生表VT6.\n### HAVING\n 对虚拟表VT6应用having过滤，只有符合<having-condition>的记录才会被 插入到虚拟表VT7中。\n### SELECT\n 执行select操作，选择指定的列，插入到虚拟表VT8中。\n### DISTINCT 对VT8中的记录进行去重。产生虚拟表VT9.\n### ORDER BY\n 将虚拟表VT9中的记录按照<order_by_list>进行排序操作，产生虚拟表VT10.\n### LIMIT\n取出指定行的记录，产生虚拟表VT11, 并将结果返回。\n\n---\n### 写的顺序：\nselect ... from... where.... group by... having... order by.. limit [offset,] \n\n### 执行顺序：\nfrom... where...group by... having.... select ... order by... limit\n","source":"_posts/SQL语句的执行顺序.md","raw":"---\ntitle: SQL语句的执行顺序\ndate: 2018-07-20 23:34:08\ntags: mysql\n---\n知道怎么执行的才能更好的优化sql的写法。\n### FORM\n 对FROM的左边的表和右边的表计算笛卡尔积。产生虚表VT1\n### ON\n 对虚表VT1进行ON筛选，只有那些符合<join-condition>的行才会被记录在虚表VT2中。\n### JOIN\n 如果指定了OUTER JOIN（比如left join、 right join），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中，产生虚拟表VT3, rug from子句中包含两个以上的表的话，那么就会对上一个join连接产生的结果VT3和下一个表重复执行步骤1~3这三个步骤，一直到处理完所有的表为止。\n### WHERE\n 对虚拟表VT3进行WHERE条件过滤。只有符合<where-condition>的记录才会被插入到虚拟表VT4中。\n## GROUP BY\n 根据group by子句中的列，对VT4中的记录进行分组操作，产生VT5.\n### CUBE | ROLLUP\n 对表VT5进行cube或者rollup操作，产生表VT6.\n### HAVING\n 对虚拟表VT6应用having过滤，只有符合<having-condition>的记录才会被 插入到虚拟表VT7中。\n### SELECT\n 执行select操作，选择指定的列，插入到虚拟表VT8中。\n### DISTINCT 对VT8中的记录进行去重。产生虚拟表VT9.\n### ORDER BY\n 将虚拟表VT9中的记录按照<order_by_list>进行排序操作，产生虚拟表VT10.\n### LIMIT\n取出指定行的记录，产生虚拟表VT11, 并将结果返回。\n\n---\n### 写的顺序：\nselect ... from... where.... group by... having... order by.. limit [offset,] \n\n### 执行顺序：\nfrom... where...group by... having.... select ... order by... limit\n","slug":"SQL语句的执行顺序","published":1,"updated":"2018-07-20T15:44:21.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nmkw0002qghhumgyg39e","content":"<p>知道怎么执行的才能更好的优化sql的写法。</p>\n<h3 id=\"FORM\"><a href=\"#FORM\" class=\"headerlink\" title=\"FORM\"></a>FORM</h3><p> 对FROM的左边的表和右边的表计算笛卡尔积。产生虚表VT1</p>\n<h3 id=\"ON\"><a href=\"#ON\" class=\"headerlink\" title=\"ON\"></a>ON</h3><p> 对虚表VT1进行ON筛选，只有那些符合<join-condition>的行才会被记录在虚表VT2中。</join-condition></p>\n<h3 id=\"JOIN\"><a href=\"#JOIN\" class=\"headerlink\" title=\"JOIN\"></a>JOIN</h3><p> 如果指定了OUTER JOIN（比如left join、 right join），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中，产生虚拟表VT3, rug from子句中包含两个以上的表的话，那么就会对上一个join连接产生的结果VT3和下一个表重复执行步骤1~3这三个步骤，一直到处理完所有的表为止。</p>\n<h3 id=\"WHERE\"><a href=\"#WHERE\" class=\"headerlink\" title=\"WHERE\"></a>WHERE</h3><p> 对虚拟表VT3进行WHERE条件过滤。只有符合<where-condition>的记录才会被插入到虚拟表VT4中。</where-condition></p>\n<h2 id=\"GROUP-BY\"><a href=\"#GROUP-BY\" class=\"headerlink\" title=\"GROUP BY\"></a>GROUP BY</h2><p> 根据group by子句中的列，对VT4中的记录进行分组操作，产生VT5.</p>\n<h3 id=\"CUBE-ROLLUP\"><a href=\"#CUBE-ROLLUP\" class=\"headerlink\" title=\"CUBE | ROLLUP\"></a>CUBE | ROLLUP</h3><p> 对表VT5进行cube或者rollup操作，产生表VT6.</p>\n<h3 id=\"HAVING\"><a href=\"#HAVING\" class=\"headerlink\" title=\"HAVING\"></a>HAVING</h3><p> 对虚拟表VT6应用having过滤，只有符合<having-condition>的记录才会被 插入到虚拟表VT7中。</having-condition></p>\n<h3 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h3><p> 执行select操作，选择指定的列，插入到虚拟表VT8中。</p>\n<h3 id=\"DISTINCT-对VT8中的记录进行去重。产生虚拟表VT9\"><a href=\"#DISTINCT-对VT8中的记录进行去重。产生虚拟表VT9\" class=\"headerlink\" title=\"DISTINCT 对VT8中的记录进行去重。产生虚拟表VT9.\"></a>DISTINCT 对VT8中的记录进行去重。产生虚拟表VT9.</h3><h3 id=\"ORDER-BY\"><a href=\"#ORDER-BY\" class=\"headerlink\" title=\"ORDER BY\"></a>ORDER BY</h3><p> 将虚拟表VT9中的记录按照&lt;order_by_list&gt;进行排序操作，产生虚拟表VT10.</p>\n<h3 id=\"LIMIT\"><a href=\"#LIMIT\" class=\"headerlink\" title=\"LIMIT\"></a>LIMIT</h3><p>取出指定行的记录，产生虚拟表VT11, 并将结果返回。</p>\n<hr>\n<h3 id=\"写的顺序：\"><a href=\"#写的顺序：\" class=\"headerlink\" title=\"写的顺序：\"></a>写的顺序：</h3><p>select … from… where…. group by… having… order by.. limit [offset,] </p>\n<h3 id=\"执行顺序：\"><a href=\"#执行顺序：\" class=\"headerlink\" title=\"执行顺序：\"></a>执行顺序：</h3><p>from… where…group by… having…. select … order by… limit</p>\n","site":{"data":{}},"excerpt":"","more":"<p>知道怎么执行的才能更好的优化sql的写法。</p>\n<h3 id=\"FORM\"><a href=\"#FORM\" class=\"headerlink\" title=\"FORM\"></a>FORM</h3><p> 对FROM的左边的表和右边的表计算笛卡尔积。产生虚表VT1</p>\n<h3 id=\"ON\"><a href=\"#ON\" class=\"headerlink\" title=\"ON\"></a>ON</h3><p> 对虚表VT1进行ON筛选，只有那些符合<join-condition>的行才会被记录在虚表VT2中。</join-condition></p>\n<h3 id=\"JOIN\"><a href=\"#JOIN\" class=\"headerlink\" title=\"JOIN\"></a>JOIN</h3><p> 如果指定了OUTER JOIN（比如left join、 right join），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中，产生虚拟表VT3, rug from子句中包含两个以上的表的话，那么就会对上一个join连接产生的结果VT3和下一个表重复执行步骤1~3这三个步骤，一直到处理完所有的表为止。</p>\n<h3 id=\"WHERE\"><a href=\"#WHERE\" class=\"headerlink\" title=\"WHERE\"></a>WHERE</h3><p> 对虚拟表VT3进行WHERE条件过滤。只有符合<where-condition>的记录才会被插入到虚拟表VT4中。</where-condition></p>\n<h2 id=\"GROUP-BY\"><a href=\"#GROUP-BY\" class=\"headerlink\" title=\"GROUP BY\"></a>GROUP BY</h2><p> 根据group by子句中的列，对VT4中的记录进行分组操作，产生VT5.</p>\n<h3 id=\"CUBE-ROLLUP\"><a href=\"#CUBE-ROLLUP\" class=\"headerlink\" title=\"CUBE | ROLLUP\"></a>CUBE | ROLLUP</h3><p> 对表VT5进行cube或者rollup操作，产生表VT6.</p>\n<h3 id=\"HAVING\"><a href=\"#HAVING\" class=\"headerlink\" title=\"HAVING\"></a>HAVING</h3><p> 对虚拟表VT6应用having过滤，只有符合<having-condition>的记录才会被 插入到虚拟表VT7中。</having-condition></p>\n<h3 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h3><p> 执行select操作，选择指定的列，插入到虚拟表VT8中。</p>\n<h3 id=\"DISTINCT-对VT8中的记录进行去重。产生虚拟表VT9\"><a href=\"#DISTINCT-对VT8中的记录进行去重。产生虚拟表VT9\" class=\"headerlink\" title=\"DISTINCT 对VT8中的记录进行去重。产生虚拟表VT9.\"></a>DISTINCT 对VT8中的记录进行去重。产生虚拟表VT9.</h3><h3 id=\"ORDER-BY\"><a href=\"#ORDER-BY\" class=\"headerlink\" title=\"ORDER BY\"></a>ORDER BY</h3><p> 将虚拟表VT9中的记录按照&lt;order_by_list&gt;进行排序操作，产生虚拟表VT10.</p>\n<h3 id=\"LIMIT\"><a href=\"#LIMIT\" class=\"headerlink\" title=\"LIMIT\"></a>LIMIT</h3><p>取出指定行的记录，产生虚拟表VT11, 并将结果返回。</p>\n<hr>\n<h3 id=\"写的顺序：\"><a href=\"#写的顺序：\" class=\"headerlink\" title=\"写的顺序：\"></a>写的顺序：</h3><p>select … from… where…. group by… having… order by.. limit [offset,] </p>\n<h3 id=\"执行顺序：\"><a href=\"#执行顺序：\" class=\"headerlink\" title=\"执行顺序：\"></a>执行顺序：</h3><p>from… where…group by… having…. select … order by… limit</p>\n"},{"title":"Ubuntu 18.04 下安装搜狗输入法的临时解决方法","date":"2018-07-11T07:00:59.000Z","_content":"由于系统版本、软件升级，依赖无法正确安装，导致搜狗拼音无法使用，搜集的解决方案如下。\n``` bash\nsudo apt install libfcitx-qt0\nmkdir unpack # 创建临时目录\ndpkg-deb -R sogoupinyin_2.2.0.0102_amd64.deb unpack/ # 解包\n```\n\n编辑 unpack/DEBIAN/control 把 Depends: 那一行里面的\n```\nfcitx-libs-qt (>= 4.2.7)\n```\n替换成:\n```\nlibfcitx-qt0 (>= 1:4.2.9.6-1)\n```\n``` bash\ndpkg-deb -b unpack/ fixed.deb # 重新封包\nsudo dpkg -i fixed.deb\nsudo apt install --fix-broken # 解决依赖关系\n```\n然后重启一下, 切换输入法到中文就OK了.","source":"_posts/Ubuntu18-04下安装搜狗输入法的临时解决方法.md","raw":"---\ntitle: Ubuntu 18.04 下安装搜狗输入法的临时解决方法\ndate: 2018-07-11 15:00:59\ntags:\n---\n由于系统版本、软件升级，依赖无法正确安装，导致搜狗拼音无法使用，搜集的解决方案如下。\n``` bash\nsudo apt install libfcitx-qt0\nmkdir unpack # 创建临时目录\ndpkg-deb -R sogoupinyin_2.2.0.0102_amd64.deb unpack/ # 解包\n```\n\n编辑 unpack/DEBIAN/control 把 Depends: 那一行里面的\n```\nfcitx-libs-qt (>= 4.2.7)\n```\n替换成:\n```\nlibfcitx-qt0 (>= 1:4.2.9.6-1)\n```\n``` bash\ndpkg-deb -b unpack/ fixed.deb # 重新封包\nsudo dpkg -i fixed.deb\nsudo apt install --fix-broken # 解决依赖关系\n```\n然后重启一下, 切换输入法到中文就OK了.","slug":"Ubuntu18-04下安装搜狗输入法的临时解决方法","published":1,"updated":"2018-07-18T15:33:37.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nmkz0004qghhy51fh8jv","content":"<p>由于系统版本、软件升级，依赖无法正确安装，导致搜狗拼音无法使用，搜集的解决方案如下。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libfcitx-qt0</span><br><span class=\"line\">mkdir unpack <span class=\"comment\"># 创建临时目录</span></span><br><span class=\"line\">dpkg-deb -R sogoupinyin_2.2.0.0102_amd64.deb unpack/ <span class=\"comment\"># 解包</span></span><br></pre></td></tr></table></figure></p>\n<p>编辑 unpack/DEBIAN/control 把 Depends: 那一行里面的<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fcitx-libs-qt (<span class=\"name\">&gt;=</span> <span class=\"number\">4.2</span>.<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure></p>\n<p>替换成:<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libfcitx-qt0 (<span class=\"name\">&gt;=</span> <span class=\"number\">1</span>:<span class=\"number\">4.2</span>.<span class=\"number\">9.6</span><span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg-deb -b unpack/ fixed.deb <span class=\"comment\"># 重新封包</span></span><br><span class=\"line\">sudo dpkg -i fixed.deb</span><br><span class=\"line\">sudo apt install --fix-broken <span class=\"comment\"># 解决依赖关系</span></span><br></pre></td></tr></table></figure>\n<p>然后重启一下, 切换输入法到中文就OK了.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于系统版本、软件升级，依赖无法正确安装，导致搜狗拼音无法使用，搜集的解决方案如下。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libfcitx-qt0</span><br><span class=\"line\">mkdir unpack <span class=\"comment\"># 创建临时目录</span></span><br><span class=\"line\">dpkg-deb -R sogoupinyin_2.2.0.0102_amd64.deb unpack/ <span class=\"comment\"># 解包</span></span><br></pre></td></tr></table></figure></p>\n<p>编辑 unpack/DEBIAN/control 把 Depends: 那一行里面的<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fcitx-libs-qt (<span class=\"name\">&gt;=</span> <span class=\"number\">4.2</span>.<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure></p>\n<p>替换成:<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libfcitx-qt0 (<span class=\"name\">&gt;=</span> <span class=\"number\">1</span>:<span class=\"number\">4.2</span>.<span class=\"number\">9.6</span><span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg-deb -b unpack/ fixed.deb <span class=\"comment\"># 重新封包</span></span><br><span class=\"line\">sudo dpkg -i fixed.deb</span><br><span class=\"line\">sudo apt install --fix-broken <span class=\"comment\"># 解决依赖关系</span></span><br></pre></td></tr></table></figure>\n<p>然后重启一下, 切换输入法到中文就OK了.</p>\n"},{"title":"git仓库删除所有提交历史记录，成为一个干净的新仓库","date":"2018-07-11T03:45:01.000Z","_content":"把旧项目提交到git上，但是会有一些历史记录，这些历史记录中可能会有项目密码等敏感信息。如何删除这些历史记录，形成一个全新的仓库，并且保持代码不变呢？\n``` bash\n# 创建一个空分支 (如果不提交，该分支不会实际创建)\n   git checkout --orphan new\n\n# Add all the files\n   git add -A\n\n# Commit the changes\n   git commit -am \"commit message\"\n\n# Delete the branch\n   git branch -D master\n\n# Rename the current branch to master\n   git branch -m master\n\n# Finally, force update your repository\n   git push -f origin master\n```\n","source":"_posts/git仓库删除所有提交历史记录，成为一个干净的新仓库.md","raw":"---\ntitle: git仓库删除所有提交历史记录，成为一个干净的新仓库\ndate: 2018-07-11 11:45:01\ntags: git\n---\n把旧项目提交到git上，但是会有一些历史记录，这些历史记录中可能会有项目密码等敏感信息。如何删除这些历史记录，形成一个全新的仓库，并且保持代码不变呢？\n``` bash\n# 创建一个空分支 (如果不提交，该分支不会实际创建)\n   git checkout --orphan new\n\n# Add all the files\n   git add -A\n\n# Commit the changes\n   git commit -am \"commit message\"\n\n# Delete the branch\n   git branch -D master\n\n# Rename the current branch to master\n   git branch -m master\n\n# Finally, force update your repository\n   git push -f origin master\n```\n","slug":"git仓库删除所有提交历史记录，成为一个干净的新仓库","published":1,"updated":"2018-07-18T15:33:37.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nml10005qghhy25icrtu","content":"<p>把旧项目提交到git上，但是会有一些历史记录，这些历史记录中可能会有项目密码等敏感信息。如何删除这些历史记录，形成一个全新的仓库，并且保持代码不变呢？<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个空分支 (如果不提交，该分支不会实际创建)</span></span><br><span class=\"line\">   git checkout --orphan new</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add all the files</span></span><br><span class=\"line\">   git add -A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commit the changes</span></span><br><span class=\"line\">   git commit -am <span class=\"string\">\"commit message\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Delete the branch</span></span><br><span class=\"line\">   git branch -D master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rename the current branch to master</span></span><br><span class=\"line\">   git branch -m master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Finally, force update your repository</span></span><br><span class=\"line\">   git push -f origin master</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>把旧项目提交到git上，但是会有一些历史记录，这些历史记录中可能会有项目密码等敏感信息。如何删除这些历史记录，形成一个全新的仓库，并且保持代码不变呢？<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个空分支 (如果不提交，该分支不会实际创建)</span></span><br><span class=\"line\">   git checkout --orphan new</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add all the files</span></span><br><span class=\"line\">   git add -A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Commit the changes</span></span><br><span class=\"line\">   git commit -am <span class=\"string\">\"commit message\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Delete the branch</span></span><br><span class=\"line\">   git branch -D master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rename the current branch to master</span></span><br><span class=\"line\">   git branch -m master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Finally, force update your repository</span></span><br><span class=\"line\">   git push -f origin master</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-07-18T15:33:37.637Z","updated":"2018-07-18T15:33:37.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nml20006qghhriy1dco9","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"jQuery选择器总结","date":"2018-07-11T06:09:32.000Z","_content":"jQuery 的选择器可谓之强大无比，这里简单地总结一下常用的元素查找方法 \n``` javascript\n$(\"#myELement\")    // 选择id值等于myElement的元素，id值不能重复在文档中只能有一个id值是myElement所以得到的是唯一的元素 \n$(\"div\")           // 选择所有的div标签元素，返回div元素数组 \n$(\".myClass\")      // 选择使用myClass类的css的所有元素 \n$(\"*\")             // 选择文档中的所有的元素，可以运用多种的选择方式进行联合选择：例如$(\"#myELement,div,.myclass\") \n \n// 层叠选择器： \n$(\"form input\")        // 选择所有的form元素中的input元素 \n$(\"#main > *\")         // 选择id值为main的所有的子元素 \n$(\"label + input\")     // 选择所有的label元素的下一个input元素节点，经测试选择器返回的是label标签后面直接跟一个input标签的所有input标签元素 \n$(\"#prev ~ div\")       // 同胞选择器，该选择器返回的为id为prev的标签元素的所有的属于同一个父元素的div标签 \n \n// 基本过滤选择器： \n$(\"tr:first\")               // 选择所有tr元素的第一个 \n$(\"tr:last\")                // 选择所有tr元素的最后一个 \n$(\"input:not(:checked) + span\")   // 过滤掉：checked的选择器的所有的input元素  \n$(\"tr:even\")               // 选择所有的tr元素的第0，2，4... ...个元素（注意：因为所选择的多个元素时为数组，所以序号是从0开始）  \n$(\"tr:odd\")                // 选择所有的tr元素的第1，3，5... ...个元素 \n$(\"td:eq(2)\")              // 选择所有的td元素中序号为2的那个td元素 \n$(\"td:gt(4)\")              // 选择td元素中序号大于4的所有td元素 \n$(\"td:ll(4)\")              // 选择td元素中序号小于4的所有的td元素 \n$(\":header\") \n$(\"div:animated\") \n\n//内容过滤选择器：  \n$(\"div:contains('John')\") // 选择所有div中含有John文本的元素 \n$(\"td:empty\")             // 选择所有的为空（也不包括文本节点）的td元素的数组 \n$(\"div:has(p)\")           // 选择所有含有p标签的div元素 \n$(\"td:parent\")            // 选择所有的以td为父节点的元素数组 \n\n// 可视化过滤选择器：  \n$(\"div:hidden\")           //选择所有的被hidden的div元素 \n$(\"div:visible\")          //选择所有的可视化的div元素 \n\n// 属性过滤选择器：  \n$(\"div[id]\")              // 选择所有含有id属性的div元素 \n$(\"input[name='newsletter']\")    // 选择所有的name属性等于'newsletter'的input元素 \n \n$(\"input[name!='newsletter']\") // 选择所有的name属性不等于'newsletter'的input元素 \n \n$(\"input[name^='news']\")         // 选择所有的name属性以'news'开头的input元素 \n$(\"input[name$='news']\")         // 选择所有的name属性以'news'结尾的input元素 \n$(\"input[name*='man']\")          // 选择所有的name属性包含'news'的input元素 \n \n$(\"input[id][name$='man']\")    // 可以使用多个属性进行联合选择，该选择器是得到所有的含有id属性并且那么属性以man结尾的元素 \n \n// 子元素过滤选择器：  \n$(\"ul li:nth-child(2)\"),$(\"ul li:nth-child(odd)\"),$(\"ul li:nth-child(3n + 1)\") \n \n$(\"div span:first-child\")          // 返回所有的div元素的第一个子节点的数组 \n$(\"div span:last-child\")           // 返回所有的div元素的最后一个节点的数组 \n$(\"div button:only-child\")       // 返回所有的div中只有唯一一个子节点的所有子节点的数组 \n \n// 表单元素选择器：  \n$(\":input\")              // 选择所有的表单输入元素，包括input, textarea, select 和 button  \n$(\":text\")               // 选择所有的text input元素\n$(\":password\")           // 选择所有的password input元素 \n$(\":radio\")              // 选择所有的radio input元素 \n$(\":checkbox\")           // 选择所有的checkbox input元素 \n$(\":submit\")             // 选择所有的submit input元素 \n$(\":image\")              // 选择所有的image input元素 \n$(\":reset\")              // 选择所有的reset input元素 \n$(\":button\")             // 选择所有的button input元素 \n$(\":file\")               // 选择所有的file input元素 \n$(\":hidden\")             // 选择所有类型为hidden的input元素或表单的隐藏域 \n \n// 表单元素过滤选择器：  \n$(\":enabled\")               // 选择所有的可操作的表单元素 \n$(\":disabled\")              // 选择所有的不可操作的表单元素 \n$(\":checked\")               // 选择所有的被checked的表单元素 \n$(\"select option:selected\") // 选择所有的select 的子元素中被selected的元素  \n \n// 选取一个 name 为\"S_03_22″的input text框的上一个td的text值\n$(\"input[@ name =S_03_22]\").parent().prev().text() \n \n// 名字以\"S_\"开始，并且不是以\"_R\"结尾的\n$(\"input[@ name ^='S_']\").not(\"[@ name $='_R']\") \n \n// 一个名为 radio_01的radio所选的值\n$(\"input[@ name =radio_01][@checked]\").val()\n\n$(\"A B\") // 查找A元素下面的所有子节点，包括非直接子节点\n$(\"A>B\") // 查找A元素下面的直接子节点\n$(\"A+B\") // 查找A元素后面的兄弟节点，包括非直接子节点\n$(\"A~B\") // 查找A元素后面的兄弟节点，不包括非直接子节点  \n$(\"A B\") // 查找A元素下面的所有子节点，包括非直接子节点 \n \n//例子：找到表单中所有的 input 元素  \n// HTML 代码:  \n// <form>\n// <label>Name:</label>\n// <input name=\"name\" />\n// <fieldset>\n//       <label>Newsletter:</label>\n//       <input name=\"newsletter\" />\n// </fieldset>\n// </form>\n// <input name=\"none\" /> \n \n$(\"form input\") \n// 结果:  \n// [ <input name=\"name\" />, <input name=\"newsletter\" /> ] \n \n$(\"A>B\") //查找A元素下面的直接子节点 \n//例子：匹配表单中所有的子级input元素。  \n// HTML 代码:  \n// <form>\n// <label>Name:</label>\n// <input name=\"name\" />\n// <fieldset>\n//       <label>Newsletter:</label>\n//       <input name=\"newsletter\" />\n// </fieldset>\n// </form>\n// <input name=\"none\" /> \n \n$(\"form > input\") \n// 结果:  \n// [ <input name=\"name\" /> ] \n \n$(\"A+B\") // 查找A元素后面的兄弟节点，包括非直接子节点 \n// 例子：匹配所有跟在 label 后面的 input 元素  \n// HTML 代码:  \n// <form>\n// <label>Name:</label>\n// <input name=\"name\" />\n// <fieldset>\n//       <label>Newsletter:</label>\n//       <input name=\"newsletter\" />\n// </fieldset>\n// </form>\n// <input name=\"none\" /> \n \n$(\"label + input\") \n// 结果:  \n// [ <input name=\"name\" />, <input name=\"newsletter\" /> ]  \n \n$(\"A~B\") // 查找A元素后面的兄弟节点，不包括非直接子节点 \n// 例子：找到所有与表单同辈的 input 元素  \n// HTML 代码:  \n// <form>\n// <label>Name:</label>\n// <input name=\"name\" />\n// <fieldset>\n//       <label>Newsletter:</label>\n//       <input name=\"newsletter\" />\n// </fieldset>\n// </form>\n// <input name=\"none\" /> \n\n$(\"form ~ input\") \n// 结果:\n// [ <input name=\"none\" /> ] \n```","source":"_posts/jQuery选择器总结.md","raw":"---\ntitle: jQuery选择器总结\ndate: 2018-07-11 14:09:32\ntags: jQuery css\n---\njQuery 的选择器可谓之强大无比，这里简单地总结一下常用的元素查找方法 \n``` javascript\n$(\"#myELement\")    // 选择id值等于myElement的元素，id值不能重复在文档中只能有一个id值是myElement所以得到的是唯一的元素 \n$(\"div\")           // 选择所有的div标签元素，返回div元素数组 \n$(\".myClass\")      // 选择使用myClass类的css的所有元素 \n$(\"*\")             // 选择文档中的所有的元素，可以运用多种的选择方式进行联合选择：例如$(\"#myELement,div,.myclass\") \n \n// 层叠选择器： \n$(\"form input\")        // 选择所有的form元素中的input元素 \n$(\"#main > *\")         // 选择id值为main的所有的子元素 \n$(\"label + input\")     // 选择所有的label元素的下一个input元素节点，经测试选择器返回的是label标签后面直接跟一个input标签的所有input标签元素 \n$(\"#prev ~ div\")       // 同胞选择器，该选择器返回的为id为prev的标签元素的所有的属于同一个父元素的div标签 \n \n// 基本过滤选择器： \n$(\"tr:first\")               // 选择所有tr元素的第一个 \n$(\"tr:last\")                // 选择所有tr元素的最后一个 \n$(\"input:not(:checked) + span\")   // 过滤掉：checked的选择器的所有的input元素  \n$(\"tr:even\")               // 选择所有的tr元素的第0，2，4... ...个元素（注意：因为所选择的多个元素时为数组，所以序号是从0开始）  \n$(\"tr:odd\")                // 选择所有的tr元素的第1，3，5... ...个元素 \n$(\"td:eq(2)\")              // 选择所有的td元素中序号为2的那个td元素 \n$(\"td:gt(4)\")              // 选择td元素中序号大于4的所有td元素 \n$(\"td:ll(4)\")              // 选择td元素中序号小于4的所有的td元素 \n$(\":header\") \n$(\"div:animated\") \n\n//内容过滤选择器：  \n$(\"div:contains('John')\") // 选择所有div中含有John文本的元素 \n$(\"td:empty\")             // 选择所有的为空（也不包括文本节点）的td元素的数组 \n$(\"div:has(p)\")           // 选择所有含有p标签的div元素 \n$(\"td:parent\")            // 选择所有的以td为父节点的元素数组 \n\n// 可视化过滤选择器：  \n$(\"div:hidden\")           //选择所有的被hidden的div元素 \n$(\"div:visible\")          //选择所有的可视化的div元素 \n\n// 属性过滤选择器：  \n$(\"div[id]\")              // 选择所有含有id属性的div元素 \n$(\"input[name='newsletter']\")    // 选择所有的name属性等于'newsletter'的input元素 \n \n$(\"input[name!='newsletter']\") // 选择所有的name属性不等于'newsletter'的input元素 \n \n$(\"input[name^='news']\")         // 选择所有的name属性以'news'开头的input元素 \n$(\"input[name$='news']\")         // 选择所有的name属性以'news'结尾的input元素 \n$(\"input[name*='man']\")          // 选择所有的name属性包含'news'的input元素 \n \n$(\"input[id][name$='man']\")    // 可以使用多个属性进行联合选择，该选择器是得到所有的含有id属性并且那么属性以man结尾的元素 \n \n// 子元素过滤选择器：  \n$(\"ul li:nth-child(2)\"),$(\"ul li:nth-child(odd)\"),$(\"ul li:nth-child(3n + 1)\") \n \n$(\"div span:first-child\")          // 返回所有的div元素的第一个子节点的数组 \n$(\"div span:last-child\")           // 返回所有的div元素的最后一个节点的数组 \n$(\"div button:only-child\")       // 返回所有的div中只有唯一一个子节点的所有子节点的数组 \n \n// 表单元素选择器：  \n$(\":input\")              // 选择所有的表单输入元素，包括input, textarea, select 和 button  \n$(\":text\")               // 选择所有的text input元素\n$(\":password\")           // 选择所有的password input元素 \n$(\":radio\")              // 选择所有的radio input元素 \n$(\":checkbox\")           // 选择所有的checkbox input元素 \n$(\":submit\")             // 选择所有的submit input元素 \n$(\":image\")              // 选择所有的image input元素 \n$(\":reset\")              // 选择所有的reset input元素 \n$(\":button\")             // 选择所有的button input元素 \n$(\":file\")               // 选择所有的file input元素 \n$(\":hidden\")             // 选择所有类型为hidden的input元素或表单的隐藏域 \n \n// 表单元素过滤选择器：  \n$(\":enabled\")               // 选择所有的可操作的表单元素 \n$(\":disabled\")              // 选择所有的不可操作的表单元素 \n$(\":checked\")               // 选择所有的被checked的表单元素 \n$(\"select option:selected\") // 选择所有的select 的子元素中被selected的元素  \n \n// 选取一个 name 为\"S_03_22″的input text框的上一个td的text值\n$(\"input[@ name =S_03_22]\").parent().prev().text() \n \n// 名字以\"S_\"开始，并且不是以\"_R\"结尾的\n$(\"input[@ name ^='S_']\").not(\"[@ name $='_R']\") \n \n// 一个名为 radio_01的radio所选的值\n$(\"input[@ name =radio_01][@checked]\").val()\n\n$(\"A B\") // 查找A元素下面的所有子节点，包括非直接子节点\n$(\"A>B\") // 查找A元素下面的直接子节点\n$(\"A+B\") // 查找A元素后面的兄弟节点，包括非直接子节点\n$(\"A~B\") // 查找A元素后面的兄弟节点，不包括非直接子节点  \n$(\"A B\") // 查找A元素下面的所有子节点，包括非直接子节点 \n \n//例子：找到表单中所有的 input 元素  \n// HTML 代码:  \n// <form>\n// <label>Name:</label>\n// <input name=\"name\" />\n// <fieldset>\n//       <label>Newsletter:</label>\n//       <input name=\"newsletter\" />\n// </fieldset>\n// </form>\n// <input name=\"none\" /> \n \n$(\"form input\") \n// 结果:  \n// [ <input name=\"name\" />, <input name=\"newsletter\" /> ] \n \n$(\"A>B\") //查找A元素下面的直接子节点 \n//例子：匹配表单中所有的子级input元素。  \n// HTML 代码:  \n// <form>\n// <label>Name:</label>\n// <input name=\"name\" />\n// <fieldset>\n//       <label>Newsletter:</label>\n//       <input name=\"newsletter\" />\n// </fieldset>\n// </form>\n// <input name=\"none\" /> \n \n$(\"form > input\") \n// 结果:  \n// [ <input name=\"name\" /> ] \n \n$(\"A+B\") // 查找A元素后面的兄弟节点，包括非直接子节点 \n// 例子：匹配所有跟在 label 后面的 input 元素  \n// HTML 代码:  \n// <form>\n// <label>Name:</label>\n// <input name=\"name\" />\n// <fieldset>\n//       <label>Newsletter:</label>\n//       <input name=\"newsletter\" />\n// </fieldset>\n// </form>\n// <input name=\"none\" /> \n \n$(\"label + input\") \n// 结果:  \n// [ <input name=\"name\" />, <input name=\"newsletter\" /> ]  \n \n$(\"A~B\") // 查找A元素后面的兄弟节点，不包括非直接子节点 \n// 例子：找到所有与表单同辈的 input 元素  \n// HTML 代码:  \n// <form>\n// <label>Name:</label>\n// <input name=\"name\" />\n// <fieldset>\n//       <label>Newsletter:</label>\n//       <input name=\"newsletter\" />\n// </fieldset>\n// </form>\n// <input name=\"none\" /> \n\n$(\"form ~ input\") \n// 结果:\n// [ <input name=\"none\" /> ] \n```","slug":"jQuery选择器总结","published":1,"updated":"2018-07-18T15:33:37.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nml40009qghhfthxyvsc","content":"<p>jQuery 的选择器可谓之强大无比，这里简单地总结一下常用的元素查找方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#myELement\"</span>)    <span class=\"comment\">// 选择id值等于myElement的元素，id值不能重复在文档中只能有一个id值是myElement所以得到的是唯一的元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"div\"</span>)           <span class=\"comment\">// 选择所有的div标签元素，返回div元素数组 </span></span><br><span class=\"line\">$(<span class=\"string\">\".myClass\"</span>)      <span class=\"comment\">// 选择使用myClass类的css的所有元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"*\"</span>)             <span class=\"comment\">// 选择文档中的所有的元素，可以运用多种的选择方式进行联合选择：例如$(\"#myELement,div,.myclass\") </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 层叠选择器： </span></span><br><span class=\"line\">$(<span class=\"string\">\"form input\"</span>)        <span class=\"comment\">// 选择所有的form元素中的input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"#main &gt; *\"</span>)         <span class=\"comment\">// 选择id值为main的所有的子元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"label + input\"</span>)     <span class=\"comment\">// 选择所有的label元素的下一个input元素节点，经测试选择器返回的是label标签后面直接跟一个input标签的所有input标签元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"#prev ~ div\"</span>)       <span class=\"comment\">// 同胞选择器，该选择器返回的为id为prev的标签元素的所有的属于同一个父元素的div标签 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 基本过滤选择器： </span></span><br><span class=\"line\">$(<span class=\"string\">\"tr:first\"</span>)               <span class=\"comment\">// 选择所有tr元素的第一个 </span></span><br><span class=\"line\">$(<span class=\"string\">\"tr:last\"</span>)                <span class=\"comment\">// 选择所有tr元素的最后一个 </span></span><br><span class=\"line\">$(<span class=\"string\">\"input:not(:checked) + span\"</span>)   <span class=\"comment\">// 过滤掉：checked的选择器的所有的input元素  </span></span><br><span class=\"line\">$(<span class=\"string\">\"tr:even\"</span>)               <span class=\"comment\">// 选择所有的tr元素的第0，2，4... ...个元素（注意：因为所选择的多个元素时为数组，所以序号是从0开始）  </span></span><br><span class=\"line\">$(<span class=\"string\">\"tr:odd\"</span>)                <span class=\"comment\">// 选择所有的tr元素的第1，3，5... ...个元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"td:eq(2)\"</span>)              <span class=\"comment\">// 选择所有的td元素中序号为2的那个td元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"td:gt(4)\"</span>)              <span class=\"comment\">// 选择td元素中序号大于4的所有td元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"td:ll(4)\"</span>)              <span class=\"comment\">// 选择td元素中序号小于4的所有的td元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":header\"</span>) </span><br><span class=\"line\">$(<span class=\"string\">\"div:animated\"</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//内容过滤选择器：  </span></span><br><span class=\"line\">$(<span class=\"string\">\"div:contains('John')\"</span>) <span class=\"comment\">// 选择所有div中含有John文本的元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"td:empty\"</span>)             <span class=\"comment\">// 选择所有的为空（也不包括文本节点）的td元素的数组 </span></span><br><span class=\"line\">$(<span class=\"string\">\"div:has(p)\"</span>)           <span class=\"comment\">// 选择所有含有p标签的div元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"td:parent\"</span>)            <span class=\"comment\">// 选择所有的以td为父节点的元素数组 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可视化过滤选择器：  </span></span><br><span class=\"line\">$(<span class=\"string\">\"div:hidden\"</span>)           <span class=\"comment\">//选择所有的被hidden的div元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"div:visible\"</span>)          <span class=\"comment\">//选择所有的可视化的div元素 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 属性过滤选择器：  </span></span><br><span class=\"line\">$(<span class=\"string\">\"div[id]\"</span>)              <span class=\"comment\">// 选择所有含有id属性的div元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"input[name='newsletter']\"</span>)    <span class=\"comment\">// 选择所有的name属性等于'newsletter'的input元素 </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"input[name!='newsletter']\"</span>) <span class=\"comment\">// 选择所有的name属性不等于'newsletter'的input元素 </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"input[name^='news']\"</span>)         <span class=\"comment\">// 选择所有的name属性以'news'开头的input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"input[name$='news']\"</span>)         <span class=\"comment\">// 选择所有的name属性以'news'结尾的input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"input[name*='man']\"</span>)          <span class=\"comment\">// 选择所有的name属性包含'news'的input元素 </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"input[id][name$='man']\"</span>)    <span class=\"comment\">// 可以使用多个属性进行联合选择，该选择器是得到所有的含有id属性并且那么属性以man结尾的元素 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 子元素过滤选择器：  </span></span><br><span class=\"line\">$(<span class=\"string\">\"ul li:nth-child(2)\"</span>),$(<span class=\"string\">\"ul li:nth-child(odd)\"</span>),$(<span class=\"string\">\"ul li:nth-child(3n + 1)\"</span>) </span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"div span:first-child\"</span>)          <span class=\"comment\">// 返回所有的div元素的第一个子节点的数组 </span></span><br><span class=\"line\">$(<span class=\"string\">\"div span:last-child\"</span>)           <span class=\"comment\">// 返回所有的div元素的最后一个节点的数组 </span></span><br><span class=\"line\">$(<span class=\"string\">\"div button:only-child\"</span>)       <span class=\"comment\">// 返回所有的div中只有唯一一个子节点的所有子节点的数组 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 表单元素选择器：  </span></span><br><span class=\"line\">$(<span class=\"string\">\":input\"</span>)              <span class=\"comment\">// 选择所有的表单输入元素，包括input, textarea, select 和 button  </span></span><br><span class=\"line\">$(<span class=\"string\">\":text\"</span>)               <span class=\"comment\">// 选择所有的text input元素</span></span><br><span class=\"line\">$(<span class=\"string\">\":password\"</span>)           <span class=\"comment\">// 选择所有的password input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":radio\"</span>)              <span class=\"comment\">// 选择所有的radio input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":checkbox\"</span>)           <span class=\"comment\">// 选择所有的checkbox input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":submit\"</span>)             <span class=\"comment\">// 选择所有的submit input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":image\"</span>)              <span class=\"comment\">// 选择所有的image input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":reset\"</span>)              <span class=\"comment\">// 选择所有的reset input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":button\"</span>)             <span class=\"comment\">// 选择所有的button input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":file\"</span>)               <span class=\"comment\">// 选择所有的file input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":hidden\"</span>)             <span class=\"comment\">// 选择所有类型为hidden的input元素或表单的隐藏域 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 表单元素过滤选择器：  </span></span><br><span class=\"line\">$(<span class=\"string\">\":enabled\"</span>)               <span class=\"comment\">// 选择所有的可操作的表单元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":disabled\"</span>)              <span class=\"comment\">// 选择所有的不可操作的表单元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":checked\"</span>)               <span class=\"comment\">// 选择所有的被checked的表单元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"select option:selected\"</span>) <span class=\"comment\">// 选择所有的select 的子元素中被selected的元素  </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 选取一个 name 为\"S_03_22″的input text框的上一个td的text值</span></span><br><span class=\"line\">$(<span class=\"string\">\"input[@ name =S_03_22]\"</span>).parent().prev().text() </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 名字以\"S_\"开始，并且不是以\"_R\"结尾的</span></span><br><span class=\"line\">$(<span class=\"string\">\"input[@ name ^='S_']\"</span>).not(<span class=\"string\">\"[@ name $='_R']\"</span>) </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 一个名为 radio_01的radio所选的值</span></span><br><span class=\"line\">$(<span class=\"string\">\"input[@ name =radio_01][@checked]\"</span>).val()</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"A B\"</span>) <span class=\"comment\">// 查找A元素下面的所有子节点，包括非直接子节点</span></span><br><span class=\"line\">$(<span class=\"string\">\"A&gt;B\"</span>) <span class=\"comment\">// 查找A元素下面的直接子节点</span></span><br><span class=\"line\">$(<span class=\"string\">\"A+B\"</span>) <span class=\"comment\">// 查找A元素后面的兄弟节点，包括非直接子节点</span></span><br><span class=\"line\">$(<span class=\"string\">\"A~B\"</span>) <span class=\"comment\">// 查找A元素后面的兄弟节点，不包括非直接子节点  </span></span><br><span class=\"line\">$(<span class=\"string\">\"A B\"</span>) <span class=\"comment\">// 查找A元素下面的所有子节点，包括非直接子节点 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//例子：找到表单中所有的 input 元素  </span></span><br><span class=\"line\"><span class=\"comment\">// HTML 代码:  </span></span><br><span class=\"line\"><span class=\"comment\">// &lt;form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;label&gt;Name:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"name\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;label&gt;Newsletter:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;input name=\"newsletter\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"none\" /&gt; </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"form input\"</span>) </span><br><span class=\"line\"><span class=\"comment\">// 结果:  </span></span><br><span class=\"line\"><span class=\"comment\">// [ &lt;input name=\"name\" /&gt;, &lt;input name=\"newsletter\" /&gt; ] </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"A&gt;B\"</span>) <span class=\"comment\">//查找A元素下面的直接子节点 </span></span><br><span class=\"line\"><span class=\"comment\">//例子：匹配表单中所有的子级input元素。  </span></span><br><span class=\"line\"><span class=\"comment\">// HTML 代码:  </span></span><br><span class=\"line\"><span class=\"comment\">// &lt;form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;label&gt;Name:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"name\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;label&gt;Newsletter:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;input name=\"newsletter\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"none\" /&gt; </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"form &gt; input\"</span>) </span><br><span class=\"line\"><span class=\"comment\">// 结果:  </span></span><br><span class=\"line\"><span class=\"comment\">// [ &lt;input name=\"name\" /&gt; ] </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"A+B\"</span>) <span class=\"comment\">// 查找A元素后面的兄弟节点，包括非直接子节点 </span></span><br><span class=\"line\"><span class=\"comment\">// 例子：匹配所有跟在 label 后面的 input 元素  </span></span><br><span class=\"line\"><span class=\"comment\">// HTML 代码:  </span></span><br><span class=\"line\"><span class=\"comment\">// &lt;form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;label&gt;Name:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"name\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;label&gt;Newsletter:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;input name=\"newsletter\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"none\" /&gt; </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"label + input\"</span>) </span><br><span class=\"line\"><span class=\"comment\">// 结果:  </span></span><br><span class=\"line\"><span class=\"comment\">// [ &lt;input name=\"name\" /&gt;, &lt;input name=\"newsletter\" /&gt; ]  </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"A~B\"</span>) <span class=\"comment\">// 查找A元素后面的兄弟节点，不包括非直接子节点 </span></span><br><span class=\"line\"><span class=\"comment\">// 例子：找到所有与表单同辈的 input 元素  </span></span><br><span class=\"line\"><span class=\"comment\">// HTML 代码:  </span></span><br><span class=\"line\"><span class=\"comment\">// &lt;form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;label&gt;Name:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"name\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;label&gt;Newsletter:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;input name=\"newsletter\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"none\" /&gt; </span></span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"form ~ input\"</span>) </span><br><span class=\"line\"><span class=\"comment\">// 结果:</span></span><br><span class=\"line\"><span class=\"comment\">// [ &lt;input name=\"none\" /&gt; ]</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>jQuery 的选择器可谓之强大无比，这里简单地总结一下常用的元素查找方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#myELement\"</span>)    <span class=\"comment\">// 选择id值等于myElement的元素，id值不能重复在文档中只能有一个id值是myElement所以得到的是唯一的元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"div\"</span>)           <span class=\"comment\">// 选择所有的div标签元素，返回div元素数组 </span></span><br><span class=\"line\">$(<span class=\"string\">\".myClass\"</span>)      <span class=\"comment\">// 选择使用myClass类的css的所有元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"*\"</span>)             <span class=\"comment\">// 选择文档中的所有的元素，可以运用多种的选择方式进行联合选择：例如$(\"#myELement,div,.myclass\") </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 层叠选择器： </span></span><br><span class=\"line\">$(<span class=\"string\">\"form input\"</span>)        <span class=\"comment\">// 选择所有的form元素中的input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"#main &gt; *\"</span>)         <span class=\"comment\">// 选择id值为main的所有的子元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"label + input\"</span>)     <span class=\"comment\">// 选择所有的label元素的下一个input元素节点，经测试选择器返回的是label标签后面直接跟一个input标签的所有input标签元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"#prev ~ div\"</span>)       <span class=\"comment\">// 同胞选择器，该选择器返回的为id为prev的标签元素的所有的属于同一个父元素的div标签 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 基本过滤选择器： </span></span><br><span class=\"line\">$(<span class=\"string\">\"tr:first\"</span>)               <span class=\"comment\">// 选择所有tr元素的第一个 </span></span><br><span class=\"line\">$(<span class=\"string\">\"tr:last\"</span>)                <span class=\"comment\">// 选择所有tr元素的最后一个 </span></span><br><span class=\"line\">$(<span class=\"string\">\"input:not(:checked) + span\"</span>)   <span class=\"comment\">// 过滤掉：checked的选择器的所有的input元素  </span></span><br><span class=\"line\">$(<span class=\"string\">\"tr:even\"</span>)               <span class=\"comment\">// 选择所有的tr元素的第0，2，4... ...个元素（注意：因为所选择的多个元素时为数组，所以序号是从0开始）  </span></span><br><span class=\"line\">$(<span class=\"string\">\"tr:odd\"</span>)                <span class=\"comment\">// 选择所有的tr元素的第1，3，5... ...个元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"td:eq(2)\"</span>)              <span class=\"comment\">// 选择所有的td元素中序号为2的那个td元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"td:gt(4)\"</span>)              <span class=\"comment\">// 选择td元素中序号大于4的所有td元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"td:ll(4)\"</span>)              <span class=\"comment\">// 选择td元素中序号小于4的所有的td元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":header\"</span>) </span><br><span class=\"line\">$(<span class=\"string\">\"div:animated\"</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//内容过滤选择器：  </span></span><br><span class=\"line\">$(<span class=\"string\">\"div:contains('John')\"</span>) <span class=\"comment\">// 选择所有div中含有John文本的元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"td:empty\"</span>)             <span class=\"comment\">// 选择所有的为空（也不包括文本节点）的td元素的数组 </span></span><br><span class=\"line\">$(<span class=\"string\">\"div:has(p)\"</span>)           <span class=\"comment\">// 选择所有含有p标签的div元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"td:parent\"</span>)            <span class=\"comment\">// 选择所有的以td为父节点的元素数组 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可视化过滤选择器：  </span></span><br><span class=\"line\">$(<span class=\"string\">\"div:hidden\"</span>)           <span class=\"comment\">//选择所有的被hidden的div元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"div:visible\"</span>)          <span class=\"comment\">//选择所有的可视化的div元素 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 属性过滤选择器：  </span></span><br><span class=\"line\">$(<span class=\"string\">\"div[id]\"</span>)              <span class=\"comment\">// 选择所有含有id属性的div元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"input[name='newsletter']\"</span>)    <span class=\"comment\">// 选择所有的name属性等于'newsletter'的input元素 </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"input[name!='newsletter']\"</span>) <span class=\"comment\">// 选择所有的name属性不等于'newsletter'的input元素 </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"input[name^='news']\"</span>)         <span class=\"comment\">// 选择所有的name属性以'news'开头的input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"input[name$='news']\"</span>)         <span class=\"comment\">// 选择所有的name属性以'news'结尾的input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"input[name*='man']\"</span>)          <span class=\"comment\">// 选择所有的name属性包含'news'的input元素 </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"input[id][name$='man']\"</span>)    <span class=\"comment\">// 可以使用多个属性进行联合选择，该选择器是得到所有的含有id属性并且那么属性以man结尾的元素 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 子元素过滤选择器：  </span></span><br><span class=\"line\">$(<span class=\"string\">\"ul li:nth-child(2)\"</span>),$(<span class=\"string\">\"ul li:nth-child(odd)\"</span>),$(<span class=\"string\">\"ul li:nth-child(3n + 1)\"</span>) </span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"div span:first-child\"</span>)          <span class=\"comment\">// 返回所有的div元素的第一个子节点的数组 </span></span><br><span class=\"line\">$(<span class=\"string\">\"div span:last-child\"</span>)           <span class=\"comment\">// 返回所有的div元素的最后一个节点的数组 </span></span><br><span class=\"line\">$(<span class=\"string\">\"div button:only-child\"</span>)       <span class=\"comment\">// 返回所有的div中只有唯一一个子节点的所有子节点的数组 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 表单元素选择器：  </span></span><br><span class=\"line\">$(<span class=\"string\">\":input\"</span>)              <span class=\"comment\">// 选择所有的表单输入元素，包括input, textarea, select 和 button  </span></span><br><span class=\"line\">$(<span class=\"string\">\":text\"</span>)               <span class=\"comment\">// 选择所有的text input元素</span></span><br><span class=\"line\">$(<span class=\"string\">\":password\"</span>)           <span class=\"comment\">// 选择所有的password input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":radio\"</span>)              <span class=\"comment\">// 选择所有的radio input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":checkbox\"</span>)           <span class=\"comment\">// 选择所有的checkbox input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":submit\"</span>)             <span class=\"comment\">// 选择所有的submit input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":image\"</span>)              <span class=\"comment\">// 选择所有的image input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":reset\"</span>)              <span class=\"comment\">// 选择所有的reset input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":button\"</span>)             <span class=\"comment\">// 选择所有的button input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":file\"</span>)               <span class=\"comment\">// 选择所有的file input元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":hidden\"</span>)             <span class=\"comment\">// 选择所有类型为hidden的input元素或表单的隐藏域 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 表单元素过滤选择器：  </span></span><br><span class=\"line\">$(<span class=\"string\">\":enabled\"</span>)               <span class=\"comment\">// 选择所有的可操作的表单元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":disabled\"</span>)              <span class=\"comment\">// 选择所有的不可操作的表单元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\":checked\"</span>)               <span class=\"comment\">// 选择所有的被checked的表单元素 </span></span><br><span class=\"line\">$(<span class=\"string\">\"select option:selected\"</span>) <span class=\"comment\">// 选择所有的select 的子元素中被selected的元素  </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 选取一个 name 为\"S_03_22″的input text框的上一个td的text值</span></span><br><span class=\"line\">$(<span class=\"string\">\"input[@ name =S_03_22]\"</span>).parent().prev().text() </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 名字以\"S_\"开始，并且不是以\"_R\"结尾的</span></span><br><span class=\"line\">$(<span class=\"string\">\"input[@ name ^='S_']\"</span>).not(<span class=\"string\">\"[@ name $='_R']\"</span>) </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 一个名为 radio_01的radio所选的值</span></span><br><span class=\"line\">$(<span class=\"string\">\"input[@ name =radio_01][@checked]\"</span>).val()</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"A B\"</span>) <span class=\"comment\">// 查找A元素下面的所有子节点，包括非直接子节点</span></span><br><span class=\"line\">$(<span class=\"string\">\"A&gt;B\"</span>) <span class=\"comment\">// 查找A元素下面的直接子节点</span></span><br><span class=\"line\">$(<span class=\"string\">\"A+B\"</span>) <span class=\"comment\">// 查找A元素后面的兄弟节点，包括非直接子节点</span></span><br><span class=\"line\">$(<span class=\"string\">\"A~B\"</span>) <span class=\"comment\">// 查找A元素后面的兄弟节点，不包括非直接子节点  </span></span><br><span class=\"line\">$(<span class=\"string\">\"A B\"</span>) <span class=\"comment\">// 查找A元素下面的所有子节点，包括非直接子节点 </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//例子：找到表单中所有的 input 元素  </span></span><br><span class=\"line\"><span class=\"comment\">// HTML 代码:  </span></span><br><span class=\"line\"><span class=\"comment\">// &lt;form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;label&gt;Name:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"name\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;label&gt;Newsletter:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;input name=\"newsletter\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"none\" /&gt; </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"form input\"</span>) </span><br><span class=\"line\"><span class=\"comment\">// 结果:  </span></span><br><span class=\"line\"><span class=\"comment\">// [ &lt;input name=\"name\" /&gt;, &lt;input name=\"newsletter\" /&gt; ] </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"A&gt;B\"</span>) <span class=\"comment\">//查找A元素下面的直接子节点 </span></span><br><span class=\"line\"><span class=\"comment\">//例子：匹配表单中所有的子级input元素。  </span></span><br><span class=\"line\"><span class=\"comment\">// HTML 代码:  </span></span><br><span class=\"line\"><span class=\"comment\">// &lt;form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;label&gt;Name:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"name\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;label&gt;Newsletter:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;input name=\"newsletter\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"none\" /&gt; </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"form &gt; input\"</span>) </span><br><span class=\"line\"><span class=\"comment\">// 结果:  </span></span><br><span class=\"line\"><span class=\"comment\">// [ &lt;input name=\"name\" /&gt; ] </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"A+B\"</span>) <span class=\"comment\">// 查找A元素后面的兄弟节点，包括非直接子节点 </span></span><br><span class=\"line\"><span class=\"comment\">// 例子：匹配所有跟在 label 后面的 input 元素  </span></span><br><span class=\"line\"><span class=\"comment\">// HTML 代码:  </span></span><br><span class=\"line\"><span class=\"comment\">// &lt;form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;label&gt;Name:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"name\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;label&gt;Newsletter:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;input name=\"newsletter\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"none\" /&gt; </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"label + input\"</span>) </span><br><span class=\"line\"><span class=\"comment\">// 结果:  </span></span><br><span class=\"line\"><span class=\"comment\">// [ &lt;input name=\"name\" /&gt;, &lt;input name=\"newsletter\" /&gt; ]  </span></span><br><span class=\"line\"> </span><br><span class=\"line\">$(<span class=\"string\">\"A~B\"</span>) <span class=\"comment\">// 查找A元素后面的兄弟节点，不包括非直接子节点 </span></span><br><span class=\"line\"><span class=\"comment\">// 例子：找到所有与表单同辈的 input 元素  </span></span><br><span class=\"line\"><span class=\"comment\">// HTML 代码:  </span></span><br><span class=\"line\"><span class=\"comment\">// &lt;form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;label&gt;Name:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"name\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;label&gt;Newsletter:&lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//       &lt;input name=\"newsletter\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/fieldset&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;input name=\"none\" /&gt; </span></span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"form ~ input\"</span>) </span><br><span class=\"line\"><span class=\"comment\">// 结果:</span></span><br><span class=\"line\"><span class=\"comment\">// [ &lt;input name=\"none\" /&gt; ]</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"mysql排序规则COLLATE修改","date":"2018-07-18T15:35:48.000Z","_content":"```\nALTER TABLE <table_name> CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n```","source":"_posts/mysql排序规则COLLATE修改.md","raw":"---\ntitle: mysql排序规则COLLATE修改\ndate: 2018-07-18 23:35:48\ntags: mysql\n---\n```\nALTER TABLE <table_name> CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n```","slug":"mysql排序规则COLLATE修改","published":1,"updated":"2018-07-18T15:39:22.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nml5000aqghhjprat79j","content":"<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> &lt;table_name&gt; <span class=\"keyword\">CONVERT</span> <span class=\"keyword\">TO</span> <span class=\"built_in\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_unicode_ci;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> &lt;table_name&gt; <span class=\"keyword\">CONVERT</span> <span class=\"keyword\">TO</span> <span class=\"built_in\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_unicode_ci;</span><br></pre></td></tr></table></figure>"},{"title":"nginx的配置、虚拟主机、负载均衡和反向代理","date":"2018-07-11T06:33:07.000Z","_content":"### nginx.conf配置文件详解\n对比Apache的配置文件来看，nginx的配置相对清晰、简单。可以大致简单分为以下六块：\n```\nmain\nevents   {\n  ....\n}\nhttp        {\n  ....\n  upstream myproject {\n    .....\n  }\n  server  {\n    ....\n    location {\n        ....\n    }\n  }\n  server  {\n    ....\n    location {\n        ....\n    }\n  }\n  ....\n}\n```\n### main(全局设置)\n```\nuser nobody nobody;\nworker_processes 2;\nerror_log  /usr/local/var/log/nginx/error.log  notice;\npid        /usr/local/var/run/nginx/nginx.pid;\nworker_rlimit_nofile 1024;\n```\n`user` 来指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。\n\n`worker_processes` 来指定了Nginx要开启的子进程数。每个Nginx进程平均耗费10M~12M内存。根据经验，一般指定1个进程就足够了，如果是多核CPU，建议指定和CPU的数量一样的进程数即可。我这里写2，那么就会开启2个子进程，总共3个进程。\n\n`error_log` 用来定义全局错误日志文件。日志输出级别有`debug`、`info`、`notice`、`warn`、`error`、`crit`可供选择，其中`debug`输出日志最为最详细，而`crit`输出日志最少。\n\n`pid` 用来指定进程id的存储文件位置。\n\n`worker_rlimit_nofile` 用于指定一个nginx进程可以打开的最多文件描述符数目，这里是65535，需要使用命令`ulimit -n 65535`来设置。\n\n### events(nginx工作模式)\nevents模块来用指定nginx的工作模式和工作模式及连接数上限\n```\nevents {\n    use kqueue; #mac平台\n    worker_connections  1024;\n}\n```\n`use`用来指定Nginx的工作模式。Nginx支持的工作模式有`select`、`poll`、`kqueue`、`epoll`、`rtsig`和`/dev/poll`。其中`select`和`poll`都是标准的工作模式，`kqueue`和`epoll`是高效的工作模式，不同的是`epoll`用在Linux平台上，而`kqueue`用在BSD系统中，因为Mac基于BSD,所以Mac也得用这个模式，对于Linux系统，`epoll`工作模式是首选。\n\n`worker_connections`用于定义Nginx每个进程的最大连接数，即接收前端的最大请求数，默认是1024。最大客户端连接数由`worker_processes`和`worker_connections`决定，即Max_clients=`worker_processes`*`worker_connections`，在作为反向代理时，Max_clients变为：Max_clients = `worker_processes` * `worker_connections`/4。 \n\n进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令`ulimit -n 65536`后，`worker_connections`的设置才能生效。\n\n### http(http设置)\nhttp模块可以说是最核心的模块了，它负责HTTP服务器相关属性的配置，它里面的server和upstream子模块，至关重要\n```\nhttp{\n    include       mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log  /usr/local/var/log/nginx/access.log  main;\n    sendfile        on;\n    tcp_nopush      on;\n    tcp_nodelay     on;\n    keepalive_timeout  10;\n    #gzip  on;\n    upstream myproject {\n        .....\n    }\n    server {\n        ....\n    }\n}\n```\n`include`用来设定文件的mime类型,类型在配置文件目录下的mime.type文件定义，来告诉nginx来识别文件类型。\n\n`default_type`设定了默认的类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置asp 的locate 环境时，Nginx是不予解析的，此时，用浏览器访问asp文件就会出现下载了。\n\n`log_format`用于设置日志的格式，和记录哪些参数，这里设置为main，刚好用于access_log来记录这种类型。\n\n`main`的类型日志如下：也可以增删部分参数。\n\n```\n127.0.0.1 - - [21/Apr/2015:18:09:54 +0800] \"GET /index.php HTTP/1.1\" 200 87151 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.76 Safari/537.36\"\n```\n`access_log` 用来纪录每次的访问日志的文件地址，后面的main是日志的格式样式，对应于log_format的main。\n\n`sendfile`参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞。\n\n`keepalive_timeout`设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接。\n\n\n### sever(主机设置)\nsever 模块是http的子模块，用来定义一个虚拟主机\n```\nserver {\n        listen       8080;\n        server_name  localhost 192.168.12.10 www.example.com;\n        # 全局定义，如果都是这一个目录，这样定义最简单。\n        root   /Users/example/www;\n        index  index.php index.html index.htm; \n        charset utf-8;\n        access_log  usr/local/var/log/host.access.log  main;\n        aerror_log  usr/local/var/log/host.error.log  error;\n        ....\n}\n```\n`server`标志定义虚拟主机开始。 \n\n`listen`用于指定虚拟主机的服务端口。 \n\n`server_name`用来指定IP地址或者域名，多个域名之间用空格分开。 \n\n`root`表示在这整个server虚拟主机内，全部的root web根目录。注意要和locate {}下面定义的区分开来。 \n\n`index`全局定义访问的默认首页地址。注意要和locate {}下面定义的区分开来。 \n\n`charset`用于设置网页的默认编码格式。 \n\n`access_log`用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式。\n\n### location(URL匹配)\nlocation模块是nginx中用的最多的，负载均衡、反向代理、虚拟域名等都与它相关。\n\n`location` 根据它字面意思就知道是来定位的，定位URL，解析URL，所以，它也提供了强大的正则匹配功能，也支持条件判断匹配，用户可以通过location指令实现Nginx对动、静态网页进行过滤处理。像我们的php环境搭建就是用到了它。\n```\n# 默认首页和虚拟机目录\nlocation / {\n            root   /Users/example/www;\n            index  index.php index.html index.htm;\n}\n```\n`location /` 表示匹配访问根目录。\n\n`root`指令用于指定访问根目录时，虚拟主机的web目录，这个目录可以是相对路径（相对路径是相对于nginx的安装目录）。也可以是绝对路径。\n\n`index`用于设定我们只输入域名后访问的默认首页地址，有个先后顺序：index.php index.html index.htm，如果没有开启目录浏览权限，又找不到这些默认首页，就会报403错误。\n\n`location`还有一种方式就是正则匹配，开启正则匹配这样：location ~。后面加个~。\n\n### upstream(负载均衡服务器设置)\nupstream 模块负债负载均衡模块，通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡\n```\nupstream example.com{\n    ip_hash;\n    server 192.168.12.1:80;\n    server 192.168.12.2:80 down;\n    server 192.168.12.3:8080  max_fails=3  fail_timeout=20s;\n    server 192.168.12.4:8080;\n}\n```\n在上面的例子中，通过upstream指令指定了一个负载均衡器的名称example.com。这个名称可以任意指定，在后面需要的地方直接调用即可。\n\n里面是`ip_hash`这是其中的一种负载均衡调度算法，下面会着重介绍。紧接着就是各种服务器了。用server关键字表识，后面接ip。\nNginx的负载均衡模块目前支持4种调度算法:\n\n`weight` 轮询（默认）。每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。weight。指定轮询权值，weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。\n\n`ip_hash`。每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。\n\n`fair`。比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块。\n\n`url_hash`。按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包。\n在HTTP Upstream模块中，可以通过server指令指定后端服务器的IP地址和端口，同时还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有：\n\n`down`，表示当前的server暂时不参与负载均衡。\n\n`backup`，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。\n\n`max_fails`，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。\n\n`fail_timeout`，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。\n\n**注意**: 当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。","source":"_posts/nginx的配置、虚拟主机、负载均衡和反向代理.md","raw":"---\ntitle: nginx的配置、虚拟主机、负载均衡和反向代理\ndate: 2018-07-11 14:33:07\ntags: nginx\n---\n### nginx.conf配置文件详解\n对比Apache的配置文件来看，nginx的配置相对清晰、简单。可以大致简单分为以下六块：\n```\nmain\nevents   {\n  ....\n}\nhttp        {\n  ....\n  upstream myproject {\n    .....\n  }\n  server  {\n    ....\n    location {\n        ....\n    }\n  }\n  server  {\n    ....\n    location {\n        ....\n    }\n  }\n  ....\n}\n```\n### main(全局设置)\n```\nuser nobody nobody;\nworker_processes 2;\nerror_log  /usr/local/var/log/nginx/error.log  notice;\npid        /usr/local/var/run/nginx/nginx.pid;\nworker_rlimit_nofile 1024;\n```\n`user` 来指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。\n\n`worker_processes` 来指定了Nginx要开启的子进程数。每个Nginx进程平均耗费10M~12M内存。根据经验，一般指定1个进程就足够了，如果是多核CPU，建议指定和CPU的数量一样的进程数即可。我这里写2，那么就会开启2个子进程，总共3个进程。\n\n`error_log` 用来定义全局错误日志文件。日志输出级别有`debug`、`info`、`notice`、`warn`、`error`、`crit`可供选择，其中`debug`输出日志最为最详细，而`crit`输出日志最少。\n\n`pid` 用来指定进程id的存储文件位置。\n\n`worker_rlimit_nofile` 用于指定一个nginx进程可以打开的最多文件描述符数目，这里是65535，需要使用命令`ulimit -n 65535`来设置。\n\n### events(nginx工作模式)\nevents模块来用指定nginx的工作模式和工作模式及连接数上限\n```\nevents {\n    use kqueue; #mac平台\n    worker_connections  1024;\n}\n```\n`use`用来指定Nginx的工作模式。Nginx支持的工作模式有`select`、`poll`、`kqueue`、`epoll`、`rtsig`和`/dev/poll`。其中`select`和`poll`都是标准的工作模式，`kqueue`和`epoll`是高效的工作模式，不同的是`epoll`用在Linux平台上，而`kqueue`用在BSD系统中，因为Mac基于BSD,所以Mac也得用这个模式，对于Linux系统，`epoll`工作模式是首选。\n\n`worker_connections`用于定义Nginx每个进程的最大连接数，即接收前端的最大请求数，默认是1024。最大客户端连接数由`worker_processes`和`worker_connections`决定，即Max_clients=`worker_processes`*`worker_connections`，在作为反向代理时，Max_clients变为：Max_clients = `worker_processes` * `worker_connections`/4。 \n\n进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令`ulimit -n 65536`后，`worker_connections`的设置才能生效。\n\n### http(http设置)\nhttp模块可以说是最核心的模块了，它负责HTTP服务器相关属性的配置，它里面的server和upstream子模块，至关重要\n```\nhttp{\n    include       mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log  /usr/local/var/log/nginx/access.log  main;\n    sendfile        on;\n    tcp_nopush      on;\n    tcp_nodelay     on;\n    keepalive_timeout  10;\n    #gzip  on;\n    upstream myproject {\n        .....\n    }\n    server {\n        ....\n    }\n}\n```\n`include`用来设定文件的mime类型,类型在配置文件目录下的mime.type文件定义，来告诉nginx来识别文件类型。\n\n`default_type`设定了默认的类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置asp 的locate 环境时，Nginx是不予解析的，此时，用浏览器访问asp文件就会出现下载了。\n\n`log_format`用于设置日志的格式，和记录哪些参数，这里设置为main，刚好用于access_log来记录这种类型。\n\n`main`的类型日志如下：也可以增删部分参数。\n\n```\n127.0.0.1 - - [21/Apr/2015:18:09:54 +0800] \"GET /index.php HTTP/1.1\" 200 87151 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.76 Safari/537.36\"\n```\n`access_log` 用来纪录每次的访问日志的文件地址，后面的main是日志的格式样式，对应于log_format的main。\n\n`sendfile`参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞。\n\n`keepalive_timeout`设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接。\n\n\n### sever(主机设置)\nsever 模块是http的子模块，用来定义一个虚拟主机\n```\nserver {\n        listen       8080;\n        server_name  localhost 192.168.12.10 www.example.com;\n        # 全局定义，如果都是这一个目录，这样定义最简单。\n        root   /Users/example/www;\n        index  index.php index.html index.htm; \n        charset utf-8;\n        access_log  usr/local/var/log/host.access.log  main;\n        aerror_log  usr/local/var/log/host.error.log  error;\n        ....\n}\n```\n`server`标志定义虚拟主机开始。 \n\n`listen`用于指定虚拟主机的服务端口。 \n\n`server_name`用来指定IP地址或者域名，多个域名之间用空格分开。 \n\n`root`表示在这整个server虚拟主机内，全部的root web根目录。注意要和locate {}下面定义的区分开来。 \n\n`index`全局定义访问的默认首页地址。注意要和locate {}下面定义的区分开来。 \n\n`charset`用于设置网页的默认编码格式。 \n\n`access_log`用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式。\n\n### location(URL匹配)\nlocation模块是nginx中用的最多的，负载均衡、反向代理、虚拟域名等都与它相关。\n\n`location` 根据它字面意思就知道是来定位的，定位URL，解析URL，所以，它也提供了强大的正则匹配功能，也支持条件判断匹配，用户可以通过location指令实现Nginx对动、静态网页进行过滤处理。像我们的php环境搭建就是用到了它。\n```\n# 默认首页和虚拟机目录\nlocation / {\n            root   /Users/example/www;\n            index  index.php index.html index.htm;\n}\n```\n`location /` 表示匹配访问根目录。\n\n`root`指令用于指定访问根目录时，虚拟主机的web目录，这个目录可以是相对路径（相对路径是相对于nginx的安装目录）。也可以是绝对路径。\n\n`index`用于设定我们只输入域名后访问的默认首页地址，有个先后顺序：index.php index.html index.htm，如果没有开启目录浏览权限，又找不到这些默认首页，就会报403错误。\n\n`location`还有一种方式就是正则匹配，开启正则匹配这样：location ~。后面加个~。\n\n### upstream(负载均衡服务器设置)\nupstream 模块负债负载均衡模块，通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡\n```\nupstream example.com{\n    ip_hash;\n    server 192.168.12.1:80;\n    server 192.168.12.2:80 down;\n    server 192.168.12.3:8080  max_fails=3  fail_timeout=20s;\n    server 192.168.12.4:8080;\n}\n```\n在上面的例子中，通过upstream指令指定了一个负载均衡器的名称example.com。这个名称可以任意指定，在后面需要的地方直接调用即可。\n\n里面是`ip_hash`这是其中的一种负载均衡调度算法，下面会着重介绍。紧接着就是各种服务器了。用server关键字表识，后面接ip。\nNginx的负载均衡模块目前支持4种调度算法:\n\n`weight` 轮询（默认）。每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。weight。指定轮询权值，weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。\n\n`ip_hash`。每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。\n\n`fair`。比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块。\n\n`url_hash`。按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包。\n在HTTP Upstream模块中，可以通过server指令指定后端服务器的IP地址和端口，同时还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有：\n\n`down`，表示当前的server暂时不参与负载均衡。\n\n`backup`，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。\n\n`max_fails`，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。\n\n`fail_timeout`，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。\n\n**注意**: 当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。","slug":"nginx的配置、虚拟主机、负载均衡和反向代理","published":1,"updated":"2018-07-18T15:33:37.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nml7000cqghhwml33oeb","content":"<h3 id=\"nginx-conf配置文件详解\"><a href=\"#nginx-conf配置文件详解\" class=\"headerlink\" title=\"nginx.conf配置文件详解\"></a>nginx.conf配置文件详解</h3><p>对比Apache的配置文件来看，nginx的配置相对清晰、简单。可以大致简单分为以下六块：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main</span><br><span class=\"line\">events   &#123;</span><br><span class=\"line\">  <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http        &#123;</span><br><span class=\"line\">  <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">  upstream myproject &#123;</span><br><span class=\"line\">    <span class=\"built_in\">..</span><span class=\"built_in\">..</span>.</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> <span class=\"built_in\"> server </span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">    location &#123;</span><br><span class=\"line\">        <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> <span class=\"built_in\"> server </span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">    location &#123;</span><br><span class=\"line\">        <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"main-全局设置\"><a href=\"#main-全局设置\" class=\"headerlink\" title=\"main(全局设置)\"></a>main(全局设置)</h3><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nobody nobody;</span><br><span class=\"line\">worker_processes 2;</span><br><span class=\"line\">error_log  /usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">var</span>/<span class=\"keyword\">log</span>/nginx/<span class=\"keyword\">error</span>.<span class=\"keyword\">log</span>  notice;</span><br><span class=\"line\">pid        /usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">var</span>/<span class=\"keyword\">run</span>/nginx/nginx.pid;</span><br><span class=\"line\">worker_rlimit_nofile 1024;</span><br></pre></td></tr></table></figure>\n<p><code>user</code> 来指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。</p>\n<p><code>worker_processes</code> 来指定了Nginx要开启的子进程数。每个Nginx进程平均耗费10M~12M内存。根据经验，一般指定1个进程就足够了，如果是多核CPU，建议指定和CPU的数量一样的进程数即可。我这里写2，那么就会开启2个子进程，总共3个进程。</p>\n<p><code>error_log</code> 用来定义全局错误日志文件。日志输出级别有<code>debug</code>、<code>info</code>、<code>notice</code>、<code>warn</code>、<code>error</code>、<code>crit</code>可供选择，其中<code>debug</code>输出日志最为最详细，而<code>crit</code>输出日志最少。</p>\n<p><code>pid</code> 用来指定进程id的存储文件位置。</p>\n<p><code>worker_rlimit_nofile</code> 用于指定一个nginx进程可以打开的最多文件描述符数目，这里是65535，需要使用命令<code>ulimit -n 65535</code>来设置。</p>\n<h3 id=\"events-nginx工作模式\"><a href=\"#events-nginx工作模式\" class=\"headerlink\" title=\"events(nginx工作模式)\"></a>events(nginx工作模式)</h3><p>events模块来用指定nginx的工作模式和工作模式及连接数上限<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">use</span> <span class=\"literal\">kqueue</span>; <span class=\"comment\">#mac平台</span></span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>use</code>用来指定Nginx的工作模式。Nginx支持的工作模式有<code>select</code>、<code>poll</code>、<code>kqueue</code>、<code>epoll</code>、<code>rtsig</code>和<code>/dev/poll</code>。其中<code>select</code>和<code>poll</code>都是标准的工作模式，<code>kqueue</code>和<code>epoll</code>是高效的工作模式，不同的是<code>epoll</code>用在Linux平台上，而<code>kqueue</code>用在BSD系统中，因为Mac基于BSD,所以Mac也得用这个模式，对于Linux系统，<code>epoll</code>工作模式是首选。</p>\n<p><code>worker_connections</code>用于定义Nginx每个进程的最大连接数，即接收前端的最大请求数，默认是1024。最大客户端连接数由<code>worker_processes</code>和<code>worker_connections</code>决定，即Max_clients=<code>worker_processes</code><em><code>worker_connections</code>，在作为反向代理时，Max_clients变为：Max_clients = <code>worker_processes</code> </em> <code>worker_connections</code>/4。 </p>\n<p>进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令<code>ulimit -n 65536</code>后，<code>worker_connections</code>的设置才能生效。</p>\n<h3 id=\"http-http设置\"><a href=\"#http-http设置\" class=\"headerlink\" title=\"http(http设置)\"></a>http(http设置)</h3><p>http模块可以说是最核心的模块了，它负责HTTP服务器相关属性的配置，它里面的server和upstream子模块，至关重要<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"keyword\">include</span>       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    log_format  main  '<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] <span class=\"string\">\"$request\"</span> '</span><br><span class=\"line\">                      '<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> <span class=\"string\">\"$http_referer\"</span> '</span><br><span class=\"line\">                      '<span class=\"string\">\"$http_user_agent\"</span> <span class=\"string\">\"$http_x_forwarded_for\"</span>';</span><br><span class=\"line\">    access_log  /usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">var</span>/<span class=\"keyword\">log</span>/nginx/access.<span class=\"keyword\">log</span>  main;</span><br><span class=\"line\">    sendfile        <span class=\"keyword\">on</span>;</span><br><span class=\"line\">    tcp_nopush      <span class=\"keyword\">on</span>;</span><br><span class=\"line\">    tcp_nodelay     <span class=\"keyword\">on</span>;</span><br><span class=\"line\">    keepalive_timeout  10;</span><br><span class=\"line\">    #gzip  <span class=\"keyword\">on</span>;</span><br><span class=\"line\">    upstream myproject &#123;</span><br><span class=\"line\">        .....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>include</code>用来设定文件的mime类型,类型在配置文件目录下的mime.type文件定义，来告诉nginx来识别文件类型。</p>\n<p><code>default_type</code>设定了默认的类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置asp 的locate 环境时，Nginx是不予解析的，此时，用浏览器访问asp文件就会出现下载了。</p>\n<p><code>log_format</code>用于设置日志的格式，和记录哪些参数，这里设置为main，刚好用于access_log来记录这种类型。</p>\n<p><code>main</code>的类型日志如下：也可以增删部分参数。</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0.0.1</span> - - <span class=\"string\">[21/Apr/2015:18:09:54 +0800]</span> <span class=\"string\">\"<span class=\"keyword\">GET</span> /index.php HTTP/1.1\"</span> <span class=\"number\">200</span> <span class=\"number\">87151</span> <span class=\"string\">\"-\"</span> <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.76 Safari/537.36\"</span></span><br></pre></td></tr></table></figure>\n<p><code>access_log</code> 用来纪录每次的访问日志的文件地址，后面的main是日志的格式样式，对应于log_format的main。</p>\n<p><code>sendfile</code>参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞。</p>\n<p><code>keepalive_timeout</code>设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接。</p>\n<h3 id=\"sever-主机设置\"><a href=\"#sever-主机设置\" class=\"headerlink\" title=\"sever(主机设置)\"></a>sever(主机设置)</h3><p>sever 模块是http的子模块，用来定义一个虚拟主机<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       <span class=\"number\">8080</span>;</span><br><span class=\"line\">        server_name  localhost <span class=\"number\">192.168</span>.12.10 www.<span class=\"built_in\">example</span>.com;</span><br><span class=\"line\">        # 全局定义，如果都是这一个目录，这样定义最简单。</span><br><span class=\"line\">        root   /Users/<span class=\"built_in\">example</span>/www;</span><br><span class=\"line\">        index  index.php index.html index.htm; </span><br><span class=\"line\">        charset utf-<span class=\"number\">8</span>;</span><br><span class=\"line\">        access_log  usr/<span class=\"built_in\">local</span>/<span class=\"built_in\">var</span>/<span class=\"built_in\">log</span>/host.access.<span class=\"built_in\">log</span>  main;</span><br><span class=\"line\">        aerror_log  usr/<span class=\"built_in\">local</span>/<span class=\"built_in\">var</span>/<span class=\"built_in\">log</span>/host.<span class=\"built_in\">error</span>.<span class=\"built_in\">log</span>  <span class=\"built_in\">error</span>;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>server</code>标志定义虚拟主机开始。 </p>\n<p><code>listen</code>用于指定虚拟主机的服务端口。 </p>\n<p><code>server_name</code>用来指定IP地址或者域名，多个域名之间用空格分开。 </p>\n<p><code>root</code>表示在这整个server虚拟主机内，全部的root web根目录。注意要和locate {}下面定义的区分开来。 </p>\n<p><code>index</code>全局定义访问的默认首页地址。注意要和locate {}下面定义的区分开来。 </p>\n<p><code>charset</code>用于设置网页的默认编码格式。 </p>\n<p><code>access_log</code>用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式。</p>\n<h3 id=\"location-URL匹配\"><a href=\"#location-URL匹配\" class=\"headerlink\" title=\"location(URL匹配)\"></a>location(URL匹配)</h3><p>location模块是nginx中用的最多的，负载均衡、反向代理、虚拟域名等都与它相关。</p>\n<p><code>location</code> 根据它字面意思就知道是来定位的，定位URL，解析URL，所以，它也提供了强大的正则匹配功能，也支持条件判断匹配，用户可以通过location指令实现Nginx对动、静态网页进行过滤处理。像我们的php环境搭建就是用到了它。<br><figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 默认首页和虚拟机目录</span></span><br><span class=\"line\"><span class=\"keyword\">location</span> / &#123;</span><br><span class=\"line\">            root   /Users/example/www;</span><br><span class=\"line\">            <span class=\"keyword\">index</span>  <span class=\"keyword\">index</span>.php <span class=\"keyword\">index</span>.html <span class=\"keyword\">index</span>.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>location /</code> 表示匹配访问根目录。</p>\n<p><code>root</code>指令用于指定访问根目录时，虚拟主机的web目录，这个目录可以是相对路径（相对路径是相对于nginx的安装目录）。也可以是绝对路径。</p>\n<p><code>index</code>用于设定我们只输入域名后访问的默认首页地址，有个先后顺序：index.php index.html index.htm，如果没有开启目录浏览权限，又找不到这些默认首页，就会报403错误。</p>\n<p><code>location</code>还有一种方式就是正则匹配，开启正则匹配这样：location ~。后面加个~。</p>\n<h3 id=\"upstream-负载均衡服务器设置\"><a href=\"#upstream-负载均衡服务器设置\" class=\"headerlink\" title=\"upstream(负载均衡服务器设置)\"></a>upstream(负载均衡服务器设置)</h3><p>upstream 模块负债负载均衡模块，通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream example.com&#123;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\">   <span class=\"built_in\"> server </span>192.168.12.1:80;</span><br><span class=\"line\">   <span class=\"built_in\"> server </span>192.168.12.2:80 down;</span><br><span class=\"line\">   <span class=\"built_in\"> server </span>192.168.12.3:8080  <span class=\"attribute\">max_fails</span>=3  <span class=\"attribute\">fail_timeout</span>=20s;</span><br><span class=\"line\">   <span class=\"built_in\"> server </span>192.168.12.4:8080;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，通过upstream指令指定了一个负载均衡器的名称example.com。这个名称可以任意指定，在后面需要的地方直接调用即可。</p>\n<p>里面是<code>ip_hash</code>这是其中的一种负载均衡调度算法，下面会着重介绍。紧接着就是各种服务器了。用server关键字表识，后面接ip。<br>Nginx的负载均衡模块目前支持4种调度算法:</p>\n<p><code>weight</code> 轮询（默认）。每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。weight。指定轮询权值，weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。</p>\n<p><code>ip_hash</code>。每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。</p>\n<p><code>fair</code>。比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块。</p>\n<p><code>url_hash</code>。按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包。<br>在HTTP Upstream模块中，可以通过server指令指定后端服务器的IP地址和端口，同时还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有：</p>\n<p><code>down</code>，表示当前的server暂时不参与负载均衡。</p>\n<p><code>backup</code>，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。</p>\n<p><code>max_fails</code>，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</p>\n<p><code>fail_timeout</code>，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。</p>\n<p><strong>注意</strong>: 当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"nginx-conf配置文件详解\"><a href=\"#nginx-conf配置文件详解\" class=\"headerlink\" title=\"nginx.conf配置文件详解\"></a>nginx.conf配置文件详解</h3><p>对比Apache的配置文件来看，nginx的配置相对清晰、简单。可以大致简单分为以下六块：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main</span><br><span class=\"line\">events   &#123;</span><br><span class=\"line\">  <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http        &#123;</span><br><span class=\"line\">  <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">  upstream myproject &#123;</span><br><span class=\"line\">    <span class=\"built_in\">..</span><span class=\"built_in\">..</span>.</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> <span class=\"built_in\"> server </span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">    location &#123;</span><br><span class=\"line\">        <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> <span class=\"built_in\"> server </span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">    location &#123;</span><br><span class=\"line\">        <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"main-全局设置\"><a href=\"#main-全局设置\" class=\"headerlink\" title=\"main(全局设置)\"></a>main(全局设置)</h3><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nobody nobody;</span><br><span class=\"line\">worker_processes 2;</span><br><span class=\"line\">error_log  /usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">var</span>/<span class=\"keyword\">log</span>/nginx/<span class=\"keyword\">error</span>.<span class=\"keyword\">log</span>  notice;</span><br><span class=\"line\">pid        /usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">var</span>/<span class=\"keyword\">run</span>/nginx/nginx.pid;</span><br><span class=\"line\">worker_rlimit_nofile 1024;</span><br></pre></td></tr></table></figure>\n<p><code>user</code> 来指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。</p>\n<p><code>worker_processes</code> 来指定了Nginx要开启的子进程数。每个Nginx进程平均耗费10M~12M内存。根据经验，一般指定1个进程就足够了，如果是多核CPU，建议指定和CPU的数量一样的进程数即可。我这里写2，那么就会开启2个子进程，总共3个进程。</p>\n<p><code>error_log</code> 用来定义全局错误日志文件。日志输出级别有<code>debug</code>、<code>info</code>、<code>notice</code>、<code>warn</code>、<code>error</code>、<code>crit</code>可供选择，其中<code>debug</code>输出日志最为最详细，而<code>crit</code>输出日志最少。</p>\n<p><code>pid</code> 用来指定进程id的存储文件位置。</p>\n<p><code>worker_rlimit_nofile</code> 用于指定一个nginx进程可以打开的最多文件描述符数目，这里是65535，需要使用命令<code>ulimit -n 65535</code>来设置。</p>\n<h3 id=\"events-nginx工作模式\"><a href=\"#events-nginx工作模式\" class=\"headerlink\" title=\"events(nginx工作模式)\"></a>events(nginx工作模式)</h3><p>events模块来用指定nginx的工作模式和工作模式及连接数上限<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">use</span> <span class=\"literal\">kqueue</span>; <span class=\"comment\">#mac平台</span></span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>use</code>用来指定Nginx的工作模式。Nginx支持的工作模式有<code>select</code>、<code>poll</code>、<code>kqueue</code>、<code>epoll</code>、<code>rtsig</code>和<code>/dev/poll</code>。其中<code>select</code>和<code>poll</code>都是标准的工作模式，<code>kqueue</code>和<code>epoll</code>是高效的工作模式，不同的是<code>epoll</code>用在Linux平台上，而<code>kqueue</code>用在BSD系统中，因为Mac基于BSD,所以Mac也得用这个模式，对于Linux系统，<code>epoll</code>工作模式是首选。</p>\n<p><code>worker_connections</code>用于定义Nginx每个进程的最大连接数，即接收前端的最大请求数，默认是1024。最大客户端连接数由<code>worker_processes</code>和<code>worker_connections</code>决定，即Max_clients=<code>worker_processes</code><em><code>worker_connections</code>，在作为反向代理时，Max_clients变为：Max_clients = <code>worker_processes</code> </em> <code>worker_connections</code>/4。 </p>\n<p>进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令<code>ulimit -n 65536</code>后，<code>worker_connections</code>的设置才能生效。</p>\n<h3 id=\"http-http设置\"><a href=\"#http-http设置\" class=\"headerlink\" title=\"http(http设置)\"></a>http(http设置)</h3><p>http模块可以说是最核心的模块了，它负责HTTP服务器相关属性的配置，它里面的server和upstream子模块，至关重要<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"keyword\">include</span>       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    log_format  main  '<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] <span class=\"string\">\"$request\"</span> '</span><br><span class=\"line\">                      '<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> <span class=\"string\">\"$http_referer\"</span> '</span><br><span class=\"line\">                      '<span class=\"string\">\"$http_user_agent\"</span> <span class=\"string\">\"$http_x_forwarded_for\"</span>';</span><br><span class=\"line\">    access_log  /usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">var</span>/<span class=\"keyword\">log</span>/nginx/access.<span class=\"keyword\">log</span>  main;</span><br><span class=\"line\">    sendfile        <span class=\"keyword\">on</span>;</span><br><span class=\"line\">    tcp_nopush      <span class=\"keyword\">on</span>;</span><br><span class=\"line\">    tcp_nodelay     <span class=\"keyword\">on</span>;</span><br><span class=\"line\">    keepalive_timeout  10;</span><br><span class=\"line\">    #gzip  <span class=\"keyword\">on</span>;</span><br><span class=\"line\">    upstream myproject &#123;</span><br><span class=\"line\">        .....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>include</code>用来设定文件的mime类型,类型在配置文件目录下的mime.type文件定义，来告诉nginx来识别文件类型。</p>\n<p><code>default_type</code>设定了默认的类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置asp 的locate 环境时，Nginx是不予解析的，此时，用浏览器访问asp文件就会出现下载了。</p>\n<p><code>log_format</code>用于设置日志的格式，和记录哪些参数，这里设置为main，刚好用于access_log来记录这种类型。</p>\n<p><code>main</code>的类型日志如下：也可以增删部分参数。</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0.0.1</span> - - <span class=\"string\">[21/Apr/2015:18:09:54 +0800]</span> <span class=\"string\">\"<span class=\"keyword\">GET</span> /index.php HTTP/1.1\"</span> <span class=\"number\">200</span> <span class=\"number\">87151</span> <span class=\"string\">\"-\"</span> <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.76 Safari/537.36\"</span></span><br></pre></td></tr></table></figure>\n<p><code>access_log</code> 用来纪录每次的访问日志的文件地址，后面的main是日志的格式样式，对应于log_format的main。</p>\n<p><code>sendfile</code>参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞。</p>\n<p><code>keepalive_timeout</code>设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接。</p>\n<h3 id=\"sever-主机设置\"><a href=\"#sever-主机设置\" class=\"headerlink\" title=\"sever(主机设置)\"></a>sever(主机设置)</h3><p>sever 模块是http的子模块，用来定义一个虚拟主机<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       <span class=\"number\">8080</span>;</span><br><span class=\"line\">        server_name  localhost <span class=\"number\">192.168</span>.12.10 www.<span class=\"built_in\">example</span>.com;</span><br><span class=\"line\">        # 全局定义，如果都是这一个目录，这样定义最简单。</span><br><span class=\"line\">        root   /Users/<span class=\"built_in\">example</span>/www;</span><br><span class=\"line\">        index  index.php index.html index.htm; </span><br><span class=\"line\">        charset utf-<span class=\"number\">8</span>;</span><br><span class=\"line\">        access_log  usr/<span class=\"built_in\">local</span>/<span class=\"built_in\">var</span>/<span class=\"built_in\">log</span>/host.access.<span class=\"built_in\">log</span>  main;</span><br><span class=\"line\">        aerror_log  usr/<span class=\"built_in\">local</span>/<span class=\"built_in\">var</span>/<span class=\"built_in\">log</span>/host.<span class=\"built_in\">error</span>.<span class=\"built_in\">log</span>  <span class=\"built_in\">error</span>;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>server</code>标志定义虚拟主机开始。 </p>\n<p><code>listen</code>用于指定虚拟主机的服务端口。 </p>\n<p><code>server_name</code>用来指定IP地址或者域名，多个域名之间用空格分开。 </p>\n<p><code>root</code>表示在这整个server虚拟主机内，全部的root web根目录。注意要和locate {}下面定义的区分开来。 </p>\n<p><code>index</code>全局定义访问的默认首页地址。注意要和locate {}下面定义的区分开来。 </p>\n<p><code>charset</code>用于设置网页的默认编码格式。 </p>\n<p><code>access_log</code>用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式。</p>\n<h3 id=\"location-URL匹配\"><a href=\"#location-URL匹配\" class=\"headerlink\" title=\"location(URL匹配)\"></a>location(URL匹配)</h3><p>location模块是nginx中用的最多的，负载均衡、反向代理、虚拟域名等都与它相关。</p>\n<p><code>location</code> 根据它字面意思就知道是来定位的，定位URL，解析URL，所以，它也提供了强大的正则匹配功能，也支持条件判断匹配，用户可以通过location指令实现Nginx对动、静态网页进行过滤处理。像我们的php环境搭建就是用到了它。<br><figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 默认首页和虚拟机目录</span></span><br><span class=\"line\"><span class=\"keyword\">location</span> / &#123;</span><br><span class=\"line\">            root   /Users/example/www;</span><br><span class=\"line\">            <span class=\"keyword\">index</span>  <span class=\"keyword\">index</span>.php <span class=\"keyword\">index</span>.html <span class=\"keyword\">index</span>.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>location /</code> 表示匹配访问根目录。</p>\n<p><code>root</code>指令用于指定访问根目录时，虚拟主机的web目录，这个目录可以是相对路径（相对路径是相对于nginx的安装目录）。也可以是绝对路径。</p>\n<p><code>index</code>用于设定我们只输入域名后访问的默认首页地址，有个先后顺序：index.php index.html index.htm，如果没有开启目录浏览权限，又找不到这些默认首页，就会报403错误。</p>\n<p><code>location</code>还有一种方式就是正则匹配，开启正则匹配这样：location ~。后面加个~。</p>\n<h3 id=\"upstream-负载均衡服务器设置\"><a href=\"#upstream-负载均衡服务器设置\" class=\"headerlink\" title=\"upstream(负载均衡服务器设置)\"></a>upstream(负载均衡服务器设置)</h3><p>upstream 模块负债负载均衡模块，通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream example.com&#123;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\">   <span class=\"built_in\"> server </span>192.168.12.1:80;</span><br><span class=\"line\">   <span class=\"built_in\"> server </span>192.168.12.2:80 down;</span><br><span class=\"line\">   <span class=\"built_in\"> server </span>192.168.12.3:8080  <span class=\"attribute\">max_fails</span>=3  <span class=\"attribute\">fail_timeout</span>=20s;</span><br><span class=\"line\">   <span class=\"built_in\"> server </span>192.168.12.4:8080;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，通过upstream指令指定了一个负载均衡器的名称example.com。这个名称可以任意指定，在后面需要的地方直接调用即可。</p>\n<p>里面是<code>ip_hash</code>这是其中的一种负载均衡调度算法，下面会着重介绍。紧接着就是各种服务器了。用server关键字表识，后面接ip。<br>Nginx的负载均衡模块目前支持4种调度算法:</p>\n<p><code>weight</code> 轮询（默认）。每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。weight。指定轮询权值，weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。</p>\n<p><code>ip_hash</code>。每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。</p>\n<p><code>fair</code>。比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块。</p>\n<p><code>url_hash</code>。按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包。<br>在HTTP Upstream模块中，可以通过server指令指定后端服务器的IP地址和端口，同时还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有：</p>\n<p><code>down</code>，表示当前的server暂时不参与负载均衡。</p>\n<p><code>backup</code>，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。</p>\n<p><code>max_fails</code>，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</p>\n<p><code>fail_timeout</code>，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。</p>\n<p><strong>注意</strong>: 当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。</p>\n"},{"title":"javascript中call、apply、bind区别","date":"2018-07-11T08:31:18.000Z","_content":"call、apply、bind 三个方法","source":"_posts/javascript中call、apply、bind区别.md","raw":"---\ntitle: javascript中call、apply、bind区别\ndate: 2018-07-11 16:31:18\ntags: js\n---\ncall、apply、bind 三个方法","slug":"javascript中call、apply、bind区别","published":1,"updated":"2018-07-18T16:06:42.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nml9000eqghh1us6kdxa","content":"<p>call、apply、bind 三个方法</p>\n","site":{"data":{}},"excerpt":"","more":"<p>call、apply、bind 三个方法</p>\n"},{"title":"为Git设置代理规则","date":"2018-07-18T15:38:03.000Z","_content":"```\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\n\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n\n// or 为单独的域名设置代理\n[http \"https://example.com\"] \nproxy = socks5://127.0.0.1:2080\n```","source":"_posts/为Git设置代理规则.md","raw":"---\ntitle: 为Git设置代理规则\ndate: 2018-07-18 23:38:03\ntags: git proxy\n---\n```\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\n\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n\n// or 为单独的域名设置代理\n[http \"https://example.com\"] \nproxy = socks5://127.0.0.1:2080\n```","slug":"为Git设置代理规则","published":1,"updated":"2018-07-18T15:44:07.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nmlb000hqghhpfhzwljw","content":"<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http<span class=\"selector-class\">.proxy</span> <span class=\"string\">'socks5://127.0.0.1:1080'</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global https<span class=\"selector-class\">.proxy</span> <span class=\"string\">'socks5://127.0.0.1:1080'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or 为单独的域名设置代理</span></span><br><span class=\"line\">[http <span class=\"string\">\"https://example.com\"</span>] </span><br><span class=\"line\">proxy = socks5:<span class=\"comment\">//127.0.0.1:2080</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http<span class=\"selector-class\">.proxy</span> <span class=\"string\">'socks5://127.0.0.1:1080'</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global https<span class=\"selector-class\">.proxy</span> <span class=\"string\">'socks5://127.0.0.1:1080'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or 为单独的域名设置代理</span></span><br><span class=\"line\">[http <span class=\"string\">\"https://example.com\"</span>] </span><br><span class=\"line\">proxy = socks5:<span class=\"comment\">//127.0.0.1:2080</span></span><br></pre></td></tr></table></figure>"},{"title":"常用开发资源国内镜像","date":"2018-07-11T03:24:56.000Z","_content":"收集记录常用的一些国内镜像地址\n\n### composer 镜像源\n1. 全局配置（推荐）\n    ```\n    composer config -g repo.packagist composer https://packagist.laravel-china.org\n    ```\n2. 为项目单独指定\n    ```\n    composer config repo.packagist composer https://packagist.laravel-china.org\n    ```\n3. 遇到问题？ composer命令后面加上 `-vvv` 可以打印出调错信息\n    ```\n    composer -vvv create-project laravel/laravel blog\n    ```\n### npm taobao 镜像源\n1. 通过 `npm` config 命令配置\n    ```\n        npm config set registry https://registry.npm.taobao.org \n    ```\n1. 单独为包指定\n    ```\n        npm --registry https://registry.npm.taobao.org info underscore\n    ```\n1. 配置文件全局指定，编辑 ~/.npmrc 加入下面内容\n    ```\n        registry = https://registry.npm.taobao.org\n    ```\n1. 安装使用`cnpm`\n    ```\n        npm install -g cnpm --registry=https://registry.npm.taobao.org\n    ```\n\n### pip 镜像源\n1. 临时使用，在命令行中添加以上参数，可以让pip从指定的镜像源安装软件\n    ```\n        pip install pythonModuleName -i https://pypi.douban.com/simple\n    ```\n1. 全局配置，修改`~/.pip/pip.conf`(没有则新建)，添加以下内容\n    ```\n        [global]\n        index-url = https://pypi.douban.com/simple\n    ```","source":"_posts/常用开发资源国内镜像.md","raw":"---\ntitle: 常用开发资源国内镜像\ndate: 2018-07-11 11:24:56\ntags: php nodejs npm python pip composer\n---\n收集记录常用的一些国内镜像地址\n\n### composer 镜像源\n1. 全局配置（推荐）\n    ```\n    composer config -g repo.packagist composer https://packagist.laravel-china.org\n    ```\n2. 为项目单独指定\n    ```\n    composer config repo.packagist composer https://packagist.laravel-china.org\n    ```\n3. 遇到问题？ composer命令后面加上 `-vvv` 可以打印出调错信息\n    ```\n    composer -vvv create-project laravel/laravel blog\n    ```\n### npm taobao 镜像源\n1. 通过 `npm` config 命令配置\n    ```\n        npm config set registry https://registry.npm.taobao.org \n    ```\n1. 单独为包指定\n    ```\n        npm --registry https://registry.npm.taobao.org info underscore\n    ```\n1. 配置文件全局指定，编辑 ~/.npmrc 加入下面内容\n    ```\n        registry = https://registry.npm.taobao.org\n    ```\n1. 安装使用`cnpm`\n    ```\n        npm install -g cnpm --registry=https://registry.npm.taobao.org\n    ```\n\n### pip 镜像源\n1. 临时使用，在命令行中添加以上参数，可以让pip从指定的镜像源安装软件\n    ```\n        pip install pythonModuleName -i https://pypi.douban.com/simple\n    ```\n1. 全局配置，修改`~/.pip/pip.conf`(没有则新建)，添加以下内容\n    ```\n        [global]\n        index-url = https://pypi.douban.com/simple\n    ```","slug":"常用开发资源国内镜像","published":1,"updated":"2018-07-18T15:33:37.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nmlc000jqghhp8gjhant","content":"<p>收集记录常用的一些国内镜像地址</p>\n<h3 id=\"composer-镜像源\"><a href=\"#composer-镜像源\" class=\"headerlink\" title=\"composer 镜像源\"></a>composer 镜像源</h3><ol>\n<li><p>全局配置（推荐）</p>\n <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g repo<span class=\"selector-class\">.packagist</span> composer https:<span class=\"comment\">//packagist.laravel-china.org</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为项目单独指定</p>\n <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config repo<span class=\"selector-class\">.packagist</span> composer https:<span class=\"comment\">//packagist.laravel-china.org</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遇到问题？ composer命令后面加上 <code>-vvv</code> 可以打印出调错信息</p>\n <figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">composer </span>-<span class=\"string\">vvv </span><span class=\"built_in\">create-project</span> <span class=\"string\">laravel/</span><span class=\"string\">laravel </span><span class=\"string\">blog</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"npm-taobao-镜像源\"><a href=\"#npm-taobao-镜像源\" class=\"headerlink\" title=\"npm taobao 镜像源\"></a>npm taobao 镜像源</h3><ol>\n<li><p>通过 <code>npm</code> config 命令配置</p>\n <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"keyword\">set</span> registry <span class=\"comment\">https:</span>//<span class=\"comment\">registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单独为包指定</p>\n <figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npm</span> --registry https://registry.npm.taobao.org <span class=\"literal\">info</span> underscore</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件全局指定，编辑 ~/.npmrc 加入下面内容</p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry = <span class=\"string\">https:</span><span class=\"comment\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装使用<code>cnpm</code></p>\n <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> install -g cnpm --registry=https:<span class=\"regexp\">//</span>registry.<span class=\"built_in\">npm</span>.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"pip-镜像源\"><a href=\"#pip-镜像源\" class=\"headerlink\" title=\"pip 镜像源\"></a>pip 镜像源</h3><ol>\n<li><p>临时使用，在命令行中添加以上参数，可以让pip从指定的镜像源安装软件</p>\n <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pythonModuleName -<span class=\"selector-tag\">i</span> https:<span class=\"comment\">//pypi.douban.com/simple</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>全局配置，修改<code>~/.pip/pip.conf</code>(没有则新建)，添加以下内容</p>\n <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">global</span>]</span><br><span class=\"line\"><span class=\"built_in\">index</span>-url = http<span class=\"variable\">s:</span>//pypi.douban.<span class=\"keyword\">com</span>/simple</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>收集记录常用的一些国内镜像地址</p>\n<h3 id=\"composer-镜像源\"><a href=\"#composer-镜像源\" class=\"headerlink\" title=\"composer 镜像源\"></a>composer 镜像源</h3><ol>\n<li><p>全局配置（推荐）</p>\n <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g repo<span class=\"selector-class\">.packagist</span> composer https:<span class=\"comment\">//packagist.laravel-china.org</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为项目单独指定</p>\n <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config repo<span class=\"selector-class\">.packagist</span> composer https:<span class=\"comment\">//packagist.laravel-china.org</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遇到问题？ composer命令后面加上 <code>-vvv</code> 可以打印出调错信息</p>\n <figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">composer </span>-<span class=\"string\">vvv </span><span class=\"built_in\">create-project</span> <span class=\"string\">laravel/</span><span class=\"string\">laravel </span><span class=\"string\">blog</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"npm-taobao-镜像源\"><a href=\"#npm-taobao-镜像源\" class=\"headerlink\" title=\"npm taobao 镜像源\"></a>npm taobao 镜像源</h3><ol>\n<li><p>通过 <code>npm</code> config 命令配置</p>\n <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"keyword\">set</span> registry <span class=\"comment\">https:</span>//<span class=\"comment\">registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单独为包指定</p>\n <figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npm</span> --registry https://registry.npm.taobao.org <span class=\"literal\">info</span> underscore</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件全局指定，编辑 ~/.npmrc 加入下面内容</p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry = <span class=\"string\">https:</span><span class=\"comment\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装使用<code>cnpm</code></p>\n <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> install -g cnpm --registry=https:<span class=\"regexp\">//</span>registry.<span class=\"built_in\">npm</span>.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"pip-镜像源\"><a href=\"#pip-镜像源\" class=\"headerlink\" title=\"pip 镜像源\"></a>pip 镜像源</h3><ol>\n<li><p>临时使用，在命令行中添加以上参数，可以让pip从指定的镜像源安装软件</p>\n <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pythonModuleName -<span class=\"selector-tag\">i</span> https:<span class=\"comment\">//pypi.douban.com/simple</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>全局配置，修改<code>~/.pip/pip.conf</code>(没有则新建)，添加以下内容</p>\n <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">global</span>]</span><br><span class=\"line\"><span class=\"built_in\">index</span>-url = http<span class=\"variable\">s:</span>//pypi.douban.<span class=\"keyword\">com</span>/simple</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"用golang实现一个RPC","date":"2018-07-11T07:15:43.000Z","_content":"使用golang实现一个简单的json rpc，提供乘除功能\n\n### server.go\n``` go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"net/rpc\"\n\t\"net/rpc/jsonrpc\"\n\t\"os\"\n\n\t\"github.com/pkg/errors\"\n)\n\ntype Args struct {\n\tA, B int\n}\n\ntype Math int\n\ntype Quot struct {\n\tQuo, Rem int\n}\n\nfunc (m *Math) Multiply(args *Args, reply *int) error {\n\t*reply = args.A * args.B\n\treturn nil\n}\n\nfunc (m *Math) Divide(args *Args, quo *Quot) error {\n\tif args.B == 0 {\n\t\treturn errors.New(\"divide by zero\")\n\t}\n\n\tquo.Quo = args.A / args.B\n\tquo.Rem = args.A % args.B\n\n\treturn nil\n}\n\nfunc main() {\n\n\tmath := new(Math)\n\trpc.Register(math)\n\n\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", \":1234\")\n\tif err != nil {\n\t\tfmt.Println(\"Fatal error:\", err)\n\t\tos.Exit(2)\n\t}\n\n\tlistener, err := net.ListenTCP(\"tcp\", tcpAddr)\n\tif err != nil {\n\t\tfmt.Println(\"Fatal error:\", err)\n\t\tos.Exit(2)\n\t}\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"conn error:\", err)\n\t\t}\n\n\t\tjsonrpc.ServeConn(conn)\n\t}\n\n}\n```\n\n### client.go\n``` go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/rpc/jsonrpc\"\n\t\"os\"\n)\n\ntype Args struct {\n\tA, B int\n}\n\ntype Quotient struct {\n\tQuo, Rem int\n}\n\nfunc main() {\n\tif len(os.Args) != 2 {\n\t\tfmt.Println(\"usage: \", os.Args[0], \"server\")\n\t\tos.Exit(1)\n\t}\n\n\tserverAddr := os.Args[1]\n\n\tclient, err := jsonrpc.Dial(\"tcp\", serverAddr+\":1234\")\n\tif err != nil {\n\t\tlog.Fatal(\"dialing:\", err)\n\t}\n\n\targs := Args{27, 2}\n\tvar reply int\n\terr = client.Call(\"Math.Multiply\", args, &reply)\n\tif err != nil {\n\t\tlog.Fatal(\"Math error:\", err)\n\t}\n\tfmt.Printf(\"Math: %d * %d = %d \\n\", args.A, args.B, reply)\n\n\tvar quo Quotient\n\terr = client.Call(\"Math.Divide\", args, &quo)\n\tif err != nil {\n\t\tlog.Fatal(\"Math errr:\", err)\n\t}\n\n\tfmt.Printf(\"Math: %d / %d = %d ... %d \\n\", args.A, args.B, quo.Quo, quo.Rem)\n\n}\n```","source":"_posts/用golang实现一个RPC.md","raw":"---\ntitle: 用golang实现一个RPC\ndate: 2018-07-11 15:15:43\ntags: go golang rpc\n---\n使用golang实现一个简单的json rpc，提供乘除功能\n\n### server.go\n``` go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"net/rpc\"\n\t\"net/rpc/jsonrpc\"\n\t\"os\"\n\n\t\"github.com/pkg/errors\"\n)\n\ntype Args struct {\n\tA, B int\n}\n\ntype Math int\n\ntype Quot struct {\n\tQuo, Rem int\n}\n\nfunc (m *Math) Multiply(args *Args, reply *int) error {\n\t*reply = args.A * args.B\n\treturn nil\n}\n\nfunc (m *Math) Divide(args *Args, quo *Quot) error {\n\tif args.B == 0 {\n\t\treturn errors.New(\"divide by zero\")\n\t}\n\n\tquo.Quo = args.A / args.B\n\tquo.Rem = args.A % args.B\n\n\treturn nil\n}\n\nfunc main() {\n\n\tmath := new(Math)\n\trpc.Register(math)\n\n\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", \":1234\")\n\tif err != nil {\n\t\tfmt.Println(\"Fatal error:\", err)\n\t\tos.Exit(2)\n\t}\n\n\tlistener, err := net.ListenTCP(\"tcp\", tcpAddr)\n\tif err != nil {\n\t\tfmt.Println(\"Fatal error:\", err)\n\t\tos.Exit(2)\n\t}\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"conn error:\", err)\n\t\t}\n\n\t\tjsonrpc.ServeConn(conn)\n\t}\n\n}\n```\n\n### client.go\n``` go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/rpc/jsonrpc\"\n\t\"os\"\n)\n\ntype Args struct {\n\tA, B int\n}\n\ntype Quotient struct {\n\tQuo, Rem int\n}\n\nfunc main() {\n\tif len(os.Args) != 2 {\n\t\tfmt.Println(\"usage: \", os.Args[0], \"server\")\n\t\tos.Exit(1)\n\t}\n\n\tserverAddr := os.Args[1]\n\n\tclient, err := jsonrpc.Dial(\"tcp\", serverAddr+\":1234\")\n\tif err != nil {\n\t\tlog.Fatal(\"dialing:\", err)\n\t}\n\n\targs := Args{27, 2}\n\tvar reply int\n\terr = client.Call(\"Math.Multiply\", args, &reply)\n\tif err != nil {\n\t\tlog.Fatal(\"Math error:\", err)\n\t}\n\tfmt.Printf(\"Math: %d * %d = %d \\n\", args.A, args.B, reply)\n\n\tvar quo Quotient\n\terr = client.Call(\"Math.Divide\", args, &quo)\n\tif err != nil {\n\t\tlog.Fatal(\"Math errr:\", err)\n\t}\n\n\tfmt.Printf(\"Math: %d / %d = %d ... %d \\n\", args.A, args.B, quo.Quo, quo.Rem)\n\n}\n```","slug":"用golang实现一个RPC","published":1,"updated":"2018-07-18T15:33:37.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nmle000lqghhrbrwplk3","content":"<p>使用golang实现一个简单的json rpc，提供乘除功能</p>\n<h3 id=\"server-go\"><a href=\"#server-go\" class=\"headerlink\" title=\"server.go\"></a>server.go</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/rpc\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/rpc/jsonrpc\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/pkg/errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Args <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tA, B <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Math <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Quot <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tQuo, Rem <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Math)</span> <span class=\"title\">Multiply</span><span class=\"params\">(args *Args, reply *<span class=\"keyword\">int</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t*reply = args.A * args.B</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Math)</span> <span class=\"title\">Divide</span><span class=\"params\">(args *Args, quo *Quot)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> args.B == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"divide by zero\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tquo.Quo = args.A / args.B</span><br><span class=\"line\">\tquo.Rem = args.A % args.B</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmath := <span class=\"built_in\">new</span>(Math)</span><br><span class=\"line\">\trpc.Register(math)</span><br><span class=\"line\"></span><br><span class=\"line\">\ttcpAddr, err := net.ResolveTCPAddr(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\":1234\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Fatal error:\"</span>, err)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlistener, err := net.ListenTCP(<span class=\"string\">\"tcp\"</span>, tcpAddr)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Fatal error:\"</span>, err)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tconn, err := listener.Accept()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"conn error:\"</span>, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tjsonrpc.ServeConn(conn)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"client-go\"><a href=\"#client-go\" class=\"headerlink\" title=\"client.go\"></a>client.go</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/rpc/jsonrpc\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Args <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tA, B <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Quotient <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tQuo, Rem <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) != <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"usage: \"</span>, os.Args[<span class=\"number\">0</span>], <span class=\"string\">\"server\"</span>)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tserverAddr := os.Args[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\tclient, err := jsonrpc.Dial(<span class=\"string\">\"tcp\"</span>, serverAddr+<span class=\"string\">\":1234\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"dialing:\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\targs := Args&#123;<span class=\"number\">27</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> reply <span class=\"keyword\">int</span></span><br><span class=\"line\">\terr = client.Call(<span class=\"string\">\"Math.Multiply\"</span>, args, &amp;reply)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"Math error:\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Math: %d * %d = %d \\n\"</span>, args.A, args.B, reply)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> quo Quotient</span><br><span class=\"line\">\terr = client.Call(<span class=\"string\">\"Math.Divide\"</span>, args, &amp;quo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"Math errr:\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Math: %d / %d = %d ... %d \\n\"</span>, args.A, args.B, quo.Quo, quo.Rem)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>使用golang实现一个简单的json rpc，提供乘除功能</p>\n<h3 id=\"server-go\"><a href=\"#server-go\" class=\"headerlink\" title=\"server.go\"></a>server.go</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/rpc\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/rpc/jsonrpc\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/pkg/errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Args <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tA, B <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Math <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Quot <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tQuo, Rem <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Math)</span> <span class=\"title\">Multiply</span><span class=\"params\">(args *Args, reply *<span class=\"keyword\">int</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t*reply = args.A * args.B</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Math)</span> <span class=\"title\">Divide</span><span class=\"params\">(args *Args, quo *Quot)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> args.B == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"divide by zero\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tquo.Quo = args.A / args.B</span><br><span class=\"line\">\tquo.Rem = args.A % args.B</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmath := <span class=\"built_in\">new</span>(Math)</span><br><span class=\"line\">\trpc.Register(math)</span><br><span class=\"line\"></span><br><span class=\"line\">\ttcpAddr, err := net.ResolveTCPAddr(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\":1234\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Fatal error:\"</span>, err)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlistener, err := net.ListenTCP(<span class=\"string\">\"tcp\"</span>, tcpAddr)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"Fatal error:\"</span>, err)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tconn, err := listener.Accept()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">\"conn error:\"</span>, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tjsonrpc.ServeConn(conn)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"client-go\"><a href=\"#client-go\" class=\"headerlink\" title=\"client.go\"></a>client.go</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/rpc/jsonrpc\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Args <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tA, B <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Quotient <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tQuo, Rem <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) != <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"usage: \"</span>, os.Args[<span class=\"number\">0</span>], <span class=\"string\">\"server\"</span>)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tserverAddr := os.Args[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\tclient, err := jsonrpc.Dial(<span class=\"string\">\"tcp\"</span>, serverAddr+<span class=\"string\">\":1234\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"dialing:\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\targs := Args&#123;<span class=\"number\">27</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> reply <span class=\"keyword\">int</span></span><br><span class=\"line\">\terr = client.Call(<span class=\"string\">\"Math.Multiply\"</span>, args, &amp;reply)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"Math error:\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Math: %d * %d = %d \\n\"</span>, args.A, args.B, reply)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> quo Quotient</span><br><span class=\"line\">\terr = client.Call(<span class=\"string\">\"Math.Divide\"</span>, args, &amp;quo)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"Math errr:\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Math: %d / %d = %d ... %d \\n\"</span>, args.A, args.B, quo.Quo, quo.Rem)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"移动端常用meta标签收集","date":"2018-07-18T15:45:34.000Z","_content":"```html\n<!--图标引入-->\n<link rel=\"short icon\" style=\"image/x-icon\" href=\"taobaoLogo.ico\" >\n<link rel=\"icon\" style=\"image/x-icon\" href=\"taobaoLogo.ico\">\n\n<!--禁止用户手动的去改变页面的大小-->\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\">\n\n<!--开启对web app的支持-->\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n\n<!--主要是正对苹果手机将数字自动识别为号码-->\n<meta name=\"format-detection\" content=\"telephone=no\" />\n\n<!-- 忽略识别邮箱，主要是针对安卓手机会自动将符合邮箱格式的字符串识别为邮箱地址-->\n<meta content=\"email=no\" name=\"format-detection\" />\n<meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\" />\n\n<!-- 添加智能 App 广告条 Smart App Banner：告诉浏览器这个网站对应的app，并在页面上显示下载banner:https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html -->\n<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n<meta name=\"HandheldFriendly\" content=\"true\">\n\n<!-- 微软的老式浏览器 -->\n<meta name=\"MobileOptimized\" content=\"320\">\n\n<!-- uc强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n\n<!-- windows phone 点击无高光 -->\n<meta name=\"msapplication-tap-highlight\" content=\"no\">\n\n<!-- 获取滚动条的滚动值 -->\nwindow.scrollY  window.scrollX\n\n<!-- 禁止用户选择文本 -->\n-webkit-user-select:none\n\n<!-- 手机图片和视频上传 -->\n<!-- 选择照片 -->\n<input type=file accept=\"image/*\">\n<!-- 选择视频 -->\n<input type=file accept=\"video/*\">\n\n<!-- 动画特效开启加速 -->\n.div {\n   -webkit-transform: translate3d(0, 0, 0);\n   -moz-transform: translate3d(0, 0, 0);\n   -ms-transform: translate3d(0, 0, 0);\n   transform: translate3d(0, 0, 0);\n  /* Other transform properties here */\n}\n\n<!-- 设置placeholder时候 focus时候文字没有隐藏 -->\ninput:focus::-webkit-input-placeholder{\n    opacity: 0;\n}\n\n<!-- 移动前端适配问题 -->\n<meta id=\"eqMobileViewport\" name=\"viewport\" content=\"width=320, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<script>\n    var g = document.documentElement.clientWidth / 320;\n    document.getElementById('eqMobileViewport').setAttribute(\"content\", \"width=320, initial-scale=\" + g + \", maximum-scale=\" + g + \", user-scalable=no\")\n</script>\n\n<!-- rem布局 引入这段原生JS代码-->\n(function (doc, win) {\nvar docEl = doc.documentElement,\nresizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\nrecalc = function () {\nvar clientWidth = docEl.clientWidth;\nif (!clientWidth) return;\nif(clientWidth>=640){\ndocEl.style.fontSize = '100px';\n}else{\ndocEl.style.fontSize = 100 * (clientWidth / 640) + 'px';\n}\n};\n\n\nif (!doc.addEventListener) return;\nwin.addEventListener(resizeEvt, recalc, false);\ndoc.addEventListener('DOMContentLoaded', recalc, false);\n})(document, window);\n\n```","source":"_posts/移动端常用meta标签收集.md","raw":"---\ntitle: 移动端常用meta标签收集\ndate: 2018-07-18 23:45:34\ntags: html h5 meta\n---\n```html\n<!--图标引入-->\n<link rel=\"short icon\" style=\"image/x-icon\" href=\"taobaoLogo.ico\" >\n<link rel=\"icon\" style=\"image/x-icon\" href=\"taobaoLogo.ico\">\n\n<!--禁止用户手动的去改变页面的大小-->\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\">\n\n<!--开启对web app的支持-->\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n\n<!--主要是正对苹果手机将数字自动识别为号码-->\n<meta name=\"format-detection\" content=\"telephone=no\" />\n\n<!-- 忽略识别邮箱，主要是针对安卓手机会自动将符合邮箱格式的字符串识别为邮箱地址-->\n<meta content=\"email=no\" name=\"format-detection\" />\n<meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\" />\n\n<!-- 添加智能 App 广告条 Smart App Banner：告诉浏览器这个网站对应的app，并在页面上显示下载banner:https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html -->\n<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n<meta name=\"HandheldFriendly\" content=\"true\">\n\n<!-- 微软的老式浏览器 -->\n<meta name=\"MobileOptimized\" content=\"320\">\n\n<!-- uc强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n\n<!-- windows phone 点击无高光 -->\n<meta name=\"msapplication-tap-highlight\" content=\"no\">\n\n<!-- 获取滚动条的滚动值 -->\nwindow.scrollY  window.scrollX\n\n<!-- 禁止用户选择文本 -->\n-webkit-user-select:none\n\n<!-- 手机图片和视频上传 -->\n<!-- 选择照片 -->\n<input type=file accept=\"image/*\">\n<!-- 选择视频 -->\n<input type=file accept=\"video/*\">\n\n<!-- 动画特效开启加速 -->\n.div {\n   -webkit-transform: translate3d(0, 0, 0);\n   -moz-transform: translate3d(0, 0, 0);\n   -ms-transform: translate3d(0, 0, 0);\n   transform: translate3d(0, 0, 0);\n  /* Other transform properties here */\n}\n\n<!-- 设置placeholder时候 focus时候文字没有隐藏 -->\ninput:focus::-webkit-input-placeholder{\n    opacity: 0;\n}\n\n<!-- 移动前端适配问题 -->\n<meta id=\"eqMobileViewport\" name=\"viewport\" content=\"width=320, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<script>\n    var g = document.documentElement.clientWidth / 320;\n    document.getElementById('eqMobileViewport').setAttribute(\"content\", \"width=320, initial-scale=\" + g + \", maximum-scale=\" + g + \", user-scalable=no\")\n</script>\n\n<!-- rem布局 引入这段原生JS代码-->\n(function (doc, win) {\nvar docEl = doc.documentElement,\nresizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\nrecalc = function () {\nvar clientWidth = docEl.clientWidth;\nif (!clientWidth) return;\nif(clientWidth>=640){\ndocEl.style.fontSize = '100px';\n}else{\ndocEl.style.fontSize = 100 * (clientWidth / 640) + 'px';\n}\n};\n\n\nif (!doc.addEventListener) return;\nwin.addEventListener(resizeEvt, recalc, false);\ndoc.addEventListener('DOMContentLoaded', recalc, false);\n})(document, window);\n\n```","slug":"移动端常用meta标签收集","published":1,"updated":"2018-07-18T15:47:33.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju5nmlg000nqghhmfat3g6f","content":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--图标引入--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"short icon\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"taobaoLogo.ico\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"taobaoLogo.ico\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--禁止用户手动的去改变页面的大小--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--开启对web app的支持--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--主要是正对苹果手机将数字自动识别为号码--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 忽略识别邮箱，主要是针对安卓手机会自动将符合邮箱格式的字符串识别为邮箱地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">\"email=no\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-itunes-app\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 添加智能 App 广告条 Smart App Banner：告诉浏览器这个网站对应的app，并在页面上显示下载banner:https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"HandheldFriendly\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 微软的老式浏览器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MobileOptimized\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"320\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"screen-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"full-screen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-fullscreen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- UC应用模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"browsermode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"application\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-page-mode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-tap-highlight\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 获取滚动条的滚动值 --&gt;</span></span><br><span class=\"line\">window.scrollY  window.scrollX</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 禁止用户选择文本 --&gt;</span></span><br><span class=\"line\">-webkit-user-select:none</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 手机图片和视频上传 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 选择照片 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">file</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 选择视频 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">file</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"video/*\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动画特效开启加速 --&gt;</span></span><br><span class=\"line\">.div &#123;</span><br><span class=\"line\">   -webkit-transform: translate3d(0, 0, 0);</span><br><span class=\"line\">   -moz-transform: translate3d(0, 0, 0);</span><br><span class=\"line\">   -ms-transform: translate3d(0, 0, 0);</span><br><span class=\"line\">   transform: translate3d(0, 0, 0);</span><br><span class=\"line\">  /* Other transform properties here */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 设置placeholder时候 focus时候文字没有隐藏 --&gt;</span></span><br><span class=\"line\">input:focus::-webkit-input-placeholder&#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 移动前端适配问题 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">id</span>=<span class=\"string\">\"eqMobileViewport\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=320, initial-scale=1, maximum-scale=1, user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> g = <span class=\"built_in\">document</span>.documentElement.clientWidth / <span class=\"number\">320</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'eqMobileViewport'</span>).setAttribute(<span class=\"string\">\"content\"</span>, <span class=\"string\">\"width=320, initial-scale=\"</span> + g + <span class=\"string\">\", maximum-scale=\"</span> + g + <span class=\"string\">\", user-scalable=no\"</span>)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- rem布局 引入这段原生JS代码--&gt;</span></span><br><span class=\"line\">(function (doc, win) &#123;</span><br><span class=\"line\">var docEl = doc.documentElement,</span><br><span class=\"line\">resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',</span><br><span class=\"line\">recalc = function () &#123;</span><br><span class=\"line\">var clientWidth = docEl.clientWidth;</span><br><span class=\"line\">if (!clientWidth) return;</span><br><span class=\"line\">if(clientWidth&gt;=640)&#123;</span><br><span class=\"line\">docEl.style.fontSize = '100px';</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">docEl.style.fontSize = 100 * (clientWidth / 640) + 'px';</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if (!doc.addEventListener) return;</span><br><span class=\"line\">win.addEventListener(resizeEvt, recalc, false);</span><br><span class=\"line\">doc.addEventListener('DOMContentLoaded', recalc, false);</span><br><span class=\"line\">&#125;)(document, window);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--图标引入--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"short icon\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"taobaoLogo.ico\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"taobaoLogo.ico\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--禁止用户手动的去改变页面的大小--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--开启对web app的支持--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--主要是正对苹果手机将数字自动识别为号码--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 忽略识别邮箱，主要是针对安卓手机会自动将符合邮箱格式的字符串识别为邮箱地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">content</span>=<span class=\"string\">\"email=no\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-itunes-app\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 添加智能 App 广告条 Smart App Banner：告诉浏览器这个网站对应的app，并在页面上显示下载banner:https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"HandheldFriendly\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 微软的老式浏览器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MobileOptimized\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"320\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"screen-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"full-screen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-fullscreen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- UC应用模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"browsermode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"application\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-page-mode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-tap-highlight\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 获取滚动条的滚动值 --&gt;</span></span><br><span class=\"line\">window.scrollY  window.scrollX</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 禁止用户选择文本 --&gt;</span></span><br><span class=\"line\">-webkit-user-select:none</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 手机图片和视频上传 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 选择照片 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">file</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 选择视频 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">file</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"video/*\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动画特效开启加速 --&gt;</span></span><br><span class=\"line\">.div &#123;</span><br><span class=\"line\">   -webkit-transform: translate3d(0, 0, 0);</span><br><span class=\"line\">   -moz-transform: translate3d(0, 0, 0);</span><br><span class=\"line\">   -ms-transform: translate3d(0, 0, 0);</span><br><span class=\"line\">   transform: translate3d(0, 0, 0);</span><br><span class=\"line\">  /* Other transform properties here */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 设置placeholder时候 focus时候文字没有隐藏 --&gt;</span></span><br><span class=\"line\">input:focus::-webkit-input-placeholder&#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 移动前端适配问题 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">id</span>=<span class=\"string\">\"eqMobileViewport\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=320, initial-scale=1, maximum-scale=1, user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> g = <span class=\"built_in\">document</span>.documentElement.clientWidth / <span class=\"number\">320</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'eqMobileViewport'</span>).setAttribute(<span class=\"string\">\"content\"</span>, <span class=\"string\">\"width=320, initial-scale=\"</span> + g + <span class=\"string\">\", maximum-scale=\"</span> + g + <span class=\"string\">\", user-scalable=no\"</span>)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- rem布局 引入这段原生JS代码--&gt;</span></span><br><span class=\"line\">(function (doc, win) &#123;</span><br><span class=\"line\">var docEl = doc.documentElement,</span><br><span class=\"line\">resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',</span><br><span class=\"line\">recalc = function () &#123;</span><br><span class=\"line\">var clientWidth = docEl.clientWidth;</span><br><span class=\"line\">if (!clientWidth) return;</span><br><span class=\"line\">if(clientWidth&gt;=640)&#123;</span><br><span class=\"line\">docEl.style.fontSize = '100px';</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">docEl.style.fontSize = 100 * (clientWidth / 640) + 'px';</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if (!doc.addEventListener) return;</span><br><span class=\"line\">win.addEventListener(resizeEvt, recalc, false);</span><br><span class=\"line\">doc.addEventListener('DOMContentLoaded', recalc, false);</span><br><span class=\"line\">&#125;)(document, window);</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjju5nmku0001qghhso1yljct","tag_id":"cjju5nmkx0003qghh808vfca5","_id":"cjju5nml40008qghht9ikyndt"},{"post_id":"cjju5nmkw0002qghhumgyg39e","tag_id":"cjju5nml30007qghhsmayh4f2","_id":"cjju5nml9000dqghhftyob8ox"},{"post_id":"cjju5nml5000aqghhjprat79j","tag_id":"cjju5nml30007qghhsmayh4f2","_id":"cjju5nmla000fqghhvenfzi63"},{"post_id":"cjju5nml10005qghhy25icrtu","tag_id":"cjju5nml6000bqghhwxhhc2se","_id":"cjju5nmlc000iqghh3hz69s92"},{"post_id":"cjju5nml40009qghhfthxyvsc","tag_id":"cjju5nmlb000gqghhps38fqns","_id":"cjju5nmlg000mqghhqe4jkquj"},{"post_id":"cjju5nml7000cqghhwml33oeb","tag_id":"cjju5nmle000kqghheo4mbf6k","_id":"cjju5nmli000pqghhavheo4o0"},{"post_id":"cjju5nml9000eqghh1us6kdxa","tag_id":"cjju5nmlh000oqghh321kelkq","_id":"cjju5nmli000rqghhavzupkpl"},{"post_id":"cjju5nmlb000hqghhpfhzwljw","tag_id":"cjju5nmli000qqghhposkne6b","_id":"cjju5nmlj000tqghhj84ejws8"},{"post_id":"cjju5nmlc000jqghhp8gjhant","tag_id":"cjju5nmlj000sqghhmwp62cnj","_id":"cjju5nmlk000vqghhb45dto9m"},{"post_id":"cjju5nmle000lqghhrbrwplk3","tag_id":"cjju5nmlj000uqghhb7trlq9n","_id":"cjju5nmlk000xqghhbxg1i8vx"},{"post_id":"cjju5nmlg000nqghhmfat3g6f","tag_id":"cjju5nmlk000wqghhfv5q8zn9","_id":"cjju5nmll000yqghhexmrab2r"}],"Tag":[{"name":"redis","_id":"cjju5nmkx0003qghh808vfca5"},{"name":"mysql","_id":"cjju5nml30007qghhsmayh4f2"},{"name":"git","_id":"cjju5nml6000bqghhwxhhc2se"},{"name":"jQuery css","_id":"cjju5nmlb000gqghhps38fqns"},{"name":"nginx","_id":"cjju5nmle000kqghheo4mbf6k"},{"name":"js","_id":"cjju5nmlh000oqghh321kelkq"},{"name":"git proxy","_id":"cjju5nmli000qqghhposkne6b"},{"name":"php nodejs npm python pip composer","_id":"cjju5nmlj000sqghhmwp62cnj"},{"name":"go golang rpc","_id":"cjju5nmlj000uqghhb7trlq9n"},{"name":"html h5 meta","_id":"cjju5nmlk000wqghhfv5q8zn9"}]}}